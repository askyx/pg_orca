set pg_orca.enable_orca to off;
create extension pg_tpch;
 create table product
  (
          pn int not null,
          pname text not null,
          pcolor text,
 
          primary key (pn)
 
  ) ;
 
  create table sale
  (
          cn int not null,
          vn int not null,
          pn int not null,
         dt date not null,
          qty int not null,
          prc float not null,
 
          primary key (cn, vn, pn)
 
  ) ;
set pg_orca.enable_orca to on;
load 'pg_orca.so';
explain select * from orders limit 10;
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 2 limit 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 3 limit 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Sort  (cost=0.00..431.00 rows=1 width=134)
         Sort Key: o_orderstatus
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(5 rows)

explain select * from orders order by 4 limit 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Sort  (cost=0.00..431.00 rows=1 width=134)
         Sort Key: o_totalprice
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(5 rows)

explain select * from orders order by 5 limit 10;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders UNION select * from orders order by 6 limit 10;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.00 rows=1 width=56)
   ->  GroupAggregate  (cost=0.00..862.00 rows=1 width=56)
         Group Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
         ->  Sort  (cost=0.00..862.00 rows=1 width=56)
               Sort Key: orders.o_orderpriority, orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_clerk, orders.o_shippriority, orders.o_comment
               ->  Append  (cost=0.00..862.00 rows=1 width=56)
                     ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=56)
                     ->  Seq Scan on orders orders_1  (cost=0.00..431.00 rows=1 width=56)
 Optimizer: pg_orca
(9 rows)

explain select * from orders EXCEPT select * from orders order by 6 limit 10;
                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.01 rows=1 width=56)
   ->  GroupAggregate  (cost=0.00..862.01 rows=1 width=56)
         Group Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
         ->  Sort  (cost=0.00..862.00 rows=1 width=56)
               Sort Key: orders.o_orderpriority, orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_clerk, orders.o_shippriority, orders.o_comment
               ->  Hash Anti Join  (cost=0.00..862.00 rows=1 width=56)
                     Hash Cond: ((orders.o_orderkey = orders_1.o_orderkey) AND (orders.o_custkey = orders_1.o_custkey) AND (orders.o_orderstatus = orders_1.o_orderstatus) AND (orders.o_totalprice = orders_1.o_totalprice) AND (orders.o_orderdate = orders_1.o_orderdate) AND (orders.o_orderpriority = orders_1.o_orderpriority) AND (orders.o_clerk = orders_1.o_clerk) AND (orders.o_shippriority = orders_1.o_shippriority) AND ((orders.o_comment)::text = (orders_1.o_comment)::text))
                     ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=56)
                     ->  Hash  (cost=431.00..431.00 rows=1 width=56)
                           ->  Seq Scan on orders orders_1  (cost=0.00..431.00 rows=1 width=56)
 Optimizer: pg_orca
(11 rows)

explain select * from orders INTERSECT select * from orders order by 6 limit 10;
                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.01 rows=1 width=56)
   ->  Sort  (cost=0.00..862.01 rows=1 width=56)
         Sort Key: orders.o_orderpriority
         ->  Hash Join  (cost=0.00..862.01 rows=1 width=56)
               Hash Cond: ((orders.o_orderkey = orders_1.o_orderkey) AND (orders.o_custkey = orders_1.o_custkey) AND (orders.o_orderstatus = orders_1.o_orderstatus) AND (orders.o_totalprice = orders_1.o_totalprice) AND (orders.o_orderdate = orders_1.o_orderdate) AND (orders.o_orderpriority = orders_1.o_orderpriority) AND (orders.o_clerk = orders_1.o_clerk) AND (orders.o_shippriority = orders_1.o_shippriority) AND ((orders.o_comment)::text = (orders_1.o_comment)::text))
               ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=56)
                     Group Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
                     ->  Sort  (cost=0.00..431.00 rows=1 width=56)
                           Sort Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
                           ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=56)
               ->  Hash  (cost=431.00..431.00 rows=1 width=56)
                     ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=56)
                           Group Key: orders_1.o_orderkey, orders_1.o_custkey, orders_1.o_orderstatus, orders_1.o_totalprice, orders_1.o_orderdate, orders_1.o_orderpriority, orders_1.o_clerk, orders_1.o_shippriority, orders_1.o_comment
                           ->  Sort  (cost=0.00..431.00 rows=1 width=56)
                                 Sort Key: orders_1.o_orderkey, orders_1.o_custkey, orders_1.o_orderstatus, orders_1.o_totalprice, orders_1.o_orderdate, orders_1.o_orderpriority, orders_1.o_clerk, orders_1.o_shippriority, orders_1.o_comment
                                 ->  Seq Scan on orders orders_1  (cost=0.00..431.00 rows=1 width=56)
 Optimizer: pg_orca
(17 rows)

explain select * from orders order by 1 desc limit 10;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan Backward using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 asc, 2  limit 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Sort  (cost=0.00..431.00 rows=1 width=134)
         Sort Key: o_orderkey, o_custkey
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(5 rows)

-- explain select sum(o_totalprice) from orders;
-- base test cases
explain (verbose) select o_totalprice + 1 from orders where o_orderkey = 1000 and o_shippriority + 1 < 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Result  (cost=0.00..431.00 rows=1 width=8)
   Output: (o_totalprice + (1)::numeric)
   ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
         Output: o_totalprice
         Filter: ((orders.o_orderkey = 1000) AND ((orders.o_shippriority + 1) < 10))
 Optimizer: pg_orca
(6 rows)

-- SemiJoin2InnerJoin
explain (verbose) select * from customer where exists (select * from nation where c_custkey = n_nationkey and c_nationkey <> n_regionkey);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.18 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
           Filter: ((customer.c_custkey = nation.n_nationkey) AND (customer.c_nationkey <> nation.n_regionkey))
 Optimizer: pg_orca
(8 rows)

explain (verbose) select * from customer where c_custkey in (select c_custkey from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.66 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = customer.c_custkey)
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(9 rows)

explain (verbose) select * from customer where c_custkey in (1,2,2,3,123,34,345,453,56,567,23,213);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
   Output: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment
   Filter: (customer.c_custkey = ANY ('{1,2,2,3,123,34,345,453,56,567,23,213}'::integer[]))
 Optimizer: pg_orca
(4 rows)

explain (verbose) select * from customer where c_custkey in (1,2,2,3,123,34,345,453,56,567,23,213) or 1+1=2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
   Output: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment
   Filter: ((customer.c_custkey = ANY ('{1,2,2,3,123,34,345,453,56,567,23,213}'::integer[])) OR ((1 + 1) = 2))
 Optimizer: pg_orca
(4 rows)

explain (verbose) select * from customer where c_custkey in (select distinct c_custkey from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.66 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = customer.c_custkey)
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(9 rows)

explain (verbose) select * from customer where c_custkey in (select c_custkey from nation limit 3);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.89 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Limit  (cost=0.00..431.00 rows=1 width=4)
           Output: (customer.c_custkey)
           ->  Result  (cost=0.00..431.00 rows=1 width=4)
                 Output: customer.c_custkey
                 ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(10 rows)

explain (verbose) select * from customer where c_custkey in (select n_nationkey from nation);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.29 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
 Optimizer: pg_orca
(7 rows)

EXPLAIN SELECT * FROM customer WHERE 1+c_custkey IN (SELECT c_nationkey+1 FROM nation);
                             QUERY PLAN                             
--------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.69 rows=1 width=223)
   Join Filter: true
   ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=223)
         Filter: ((1 + c_custkey) = (c_nationkey + 1))
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(7 rows)

explain (verbose) select * from customer where 2 in (select n_nationkey + 1 from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.67 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   ->  Materialize  (cost=0.00..431.00 rows=1 width=1)
         ->  Result  (cost=0.00..431.00 rows=1 width=1)
               Filter: (2 = ((nation.n_nationkey + 1)))
               ->  Result  (cost=0.00..431.00 rows=1 width=4)
                     Output: (nation.n_nationkey + 1)
                     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
                           Output: nation.n_nationkey
 Optimizer: pg_orca
(13 rows)

explain (verbose) select * from customer where customer.c_custkey in (select customer.c_nationkey + 1 from (
 select * from nation where nation.n_nationkey in (select nation.n_nationkey + 1 from orders)
)i);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1356691723.67 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = (customer.c_nationkey + 1))
   ->  Materialize  (cost=0.00..1324032.26 rows=1 width=1)
         ->  Limit  (cost=0.00..1324032.26 rows=1 width=1)
               ->  Nested Loop Semi Join  (cost=0.00..1324032.26 rows=1 width=1)
                     Join Filter: true
                     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
                           Filter: (nation.n_nationkey = (nation.n_nationkey + 1))
                     ->  Limit  (cost=0.00..431.00 rows=1 width=1)
                           ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(15 rows)

explain (verbose) select * from customer a join customer b on a.c_custkey != b.c_custkey;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..1324035.66 rows=1 width=446)
   Output: a.c_custkey, a.c_name, a.c_address, a.c_nationkey, a.c_phone, a.c_acctbal, a.c_mktsegment, a.c_comment, b.c_custkey, b.c_name, b.c_address, b.c_nationkey, b.c_phone, b.c_acctbal, b.c_mktsegment, b.c_comment
   Join Filter: (a.c_custkey <> b.c_custkey)
   ->  Seq Scan on public.customer a  (cost=0.00..431.00 rows=1 width=223)
         Output: a.c_custkey, a.c_name, a.c_address, a.c_nationkey, a.c_phone, a.c_acctbal, a.c_mktsegment, a.c_comment
   ->  Seq Scan on public.customer b  (cost=0.00..431.00 rows=1 width=223)
         Output: b.c_custkey, b.c_name, b.c_address, b.c_nationkey, b.c_phone, b.c_acctbal, b.c_mktsegment, b.c_comment
 Optimizer: pg_orca
(8 rows)

explain (verbose) select * from customer where exists(select n_nationkey from nation where nation.n_nationkey<>customer.c_custkey group by nation.n_nationkey); 
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.11 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
           Filter: (nation.n_nationkey <> customer.c_custkey)
 Optimizer: pg_orca
(8 rows)

explain (verbose) SELECT pn, cn, vn FROM sale s WHERE EXISTS (SELECT * FROM customer WHERE EXISTS (SELECT * FROM product WHERE pn = s.pn));
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Seq Scan on public.sale s  (cost=0.00..1356691744.18 rows=1 width=12)
   Output: s.pn, s.cn, s.vn
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Nested Loop Semi Join  (cost=0.00..1324032.28 rows=1 width=6)
           Output: customer.ctid
           Join Filter: true
           ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=6)
                 Output: customer.ctid
           ->  Materialize  (cost=0.00..431.00 rows=1 width=1)
                 ->  Seq Scan on public.product  (cost=0.00..431.00 rows=1 width=1)
                       Filter: (product.pn = s.pn)
 Optimizer: pg_orca
(13 rows)

EXPLAIN SELECT pn, cn, vn FROM sale s WHERE cn IN (SELECT s.pn FROM customer WHERE cn NOT IN (SELECT pn FROM product WHERE pn = s.pn));
                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..1356691790.89 rows=1 width=12)
   ->  Seq Scan on sale s  (cost=0.00..1356691790.89 rows=1 width=12)
         Filter: ((cn = pn) AND EXISTS(SubPlan 2))
         SubPlan 2
           ->  Seq Scan on customer  (cost=0.00..1324032.33 rows=1 width=6)
                 Filter: (SubPlan 1)
                 SubPlan 1
                   ->  Result  (cost=0.00..431.00 rows=1 width=1)
                         ->  Result  (cost=0.00..431.00 rows=1 width=1)
                               Filter: ((CASE WHEN ((sum((CASE WHEN (customer.* = product.pn) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (product.pn IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (customer.* IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (customer.* = product.pn) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END) = true)
                               ->  Result  (cost=0.00..431.00 rows=1 width=1)
                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=16)
                                           ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                 ->  Seq Scan on product  (cost=0.00..431.00 rows=1 width=4)
                                                       Filter: (pn = customer.*)
 Optimizer: pg_orca
(16 rows)

EXPLAIN select * from customer where exists (select 1 from nation where nation.n_nationkey = customer.c_custkey and customer.c_custkey > 1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Seq Scan on customer  (cost=0.00..1324033.11 rows=1 width=56)
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Result  (cost=0.00..431.00 rows=1 width=4)
           ->  Result  (cost=0.00..431.00 rows=1 width=4)
                 ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=4)
                       Filter: ((n_nationkey = customer.c_custkey) AND (customer.c_custkey > 1))
 Optimizer: pg_orca
(8 rows)

explain verbose select o_custkey,o_orderkey,o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
   Output: o_custkey, o_orderkey, o_custkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_custkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_orderkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_orderkey
 Optimizer: pg_orca
(3 rows)

explain verbose select * from orders;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=134)
   Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey,o_orderkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
   Output: o_custkey, o_orderkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey,o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_custkey, o_custkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_orderkey,o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
   Output: o_orderkey, o_custkey
 Optimizer: pg_orca
(3 rows)

explain (verbose) select o_totalprice + 1, o_totalprice - 1, o_totalprice * 1, o_totalprice / 1 from orders where o_orderkey = 1000 and o_shippriority + 1 > 10;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.00 rows=1 width=32)
   Output: (o_totalprice + (1)::numeric), (o_totalprice - (1)::numeric), (o_totalprice * (1)::numeric), (o_totalprice / (1)::numeric)
   ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
         Output: o_totalprice
         Filter: ((orders.o_orderkey = 1000) AND ((orders.o_shippriority + 1) > 10))
 Optimizer: pg_orca
(6 rows)

explain select o_orderkey from orders limit 10;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=4)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=4)
 Optimizer: pg_orca
(3 rows)

explain select * from orders limit 10;
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select o_orderkey from orders order by 1 limit 10;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=4)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=4)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select o_custkey from orders order by 1 limit 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=4)
   ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..6.00 rows=1 width=4)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

select sum(o_custkey) from orders;
 sum 
-----
    
(1 row)

select sum(o_custkey) from orders group by o_orderkey;
 sum 
-----
(0 rows)

select o_orderkey, sum(o_custkey) from orders group by o_orderkey order by o_orderkey;
 o_orderkey | sum 
------------+-----
(0 rows)

select o_orderkey, sum(o_custkey) from orders group by o_orderkey order by o_orderkey limit 10;
 o_orderkey | sum 
------------+-----
(0 rows)

select o_orderkey, sum(o_custkey + o_orderkey) from orders group by o_orderkey order by o_orderkey limit 10;
 o_orderkey | sum 
------------+-----
(0 rows)

-- select o_orderkey, sum(o_custkey + o_orderkey)/20 from orders group by o_orderkey order by o_orderkey limit 10;
select * from orders where exists (select 1 from nation where nation.n_regionkey = orders.o_custkey and nation.n_regionkey = 10);
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------
(0 rows)

explain insert  into orders select * from orders where o_custkey = 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Insert on orders  (cost=0.14..8.16 rows=0 width=0)
   ->  Index Scan using idx_orders_custkey on orders orders_1  (cost=0.14..8.16 rows=1 width=346)
         Index Cond: (o_custkey = 1)
 Optimizer: pg_orca
(4 rows)

explain update orders set o_orderkey = 1 where o_orderkey = 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Update on orders  (cost=0.14..8.16 rows=0 width=0)
   ->  Index Scan using orders_pkey on orders  (cost=0.14..8.16 rows=1 width=10)
         Index Cond: (o_orderkey = 1)
 Optimizer: pg_orca
(4 rows)

explain delete from orders where o_orderkey = 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Delete on orders  (cost=0.14..8.16 rows=0 width=0)
   ->  Index Scan using orders_pkey on orders  (cost=0.14..8.16 rows=1 width=6)
         Index Cond: (o_orderkey = 1)
 Optimizer: pg_orca
(4 rows)

select * from orders join nation on orders.o_custkey = nation.n_regionkey;
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment | n_nationkey | n_name | n_regionkey | n_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------+-------------+--------+-------------+-----------
(0 rows)

select * from orders join nation on orders.o_custkey = nation.n_regionkey and nation.n_regionkey = 1;
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment | n_nationkey | n_name | n_regionkey | n_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------+-------------+--------+-------------+-----------
(0 rows)

select * from orders join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1;
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment | n_nationkey | n_name | n_regionkey | n_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------+-------------+--------+-------------+-----------
(0 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..1324036.24 rows=2 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
 Optimizer: pg_orca
(5 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey and nation.n_regionkey = 1;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..1324036.46 rows=2 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Materialize  (cost=0.00..431.00 rows=1 width=185)
         ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
               Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(7 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Nested Loop  (cost=0.00..1324034.97 rows=1 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Materialize  (cost=0.00..431.00 rows=1 width=185)
         ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
               Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(7 rows)

EXPLAIN with cte as (select * from orders) select * from cte;
                        QUERY PLAN                        
----------------------------------------------------------
 Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(2 rows)

EXPLAIN with x as (select o_custkey a1, o_custkey a2, o_custkey from orders) select * from x where a1 = 1 and a2 = 2;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.00 rows=1 width=12)
   Filter: ((o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = 2))
   ->  Result  (cost=0.00..431.00 rows=1 width=12)
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=4)
               Filter: (o_custkey = 1)
 Optimizer: pg_orca
(6 rows)

EXPLAIN with cte as (select * from orders left join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1)  select * from cte where o_orderkey = 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Result  (cost=0.00..1324034.97 rows=1 width=319)
   Filter: (orders.o_orderkey = 1)
   ->  Nested Loop  (cost=0.00..1324034.97 rows=1 width=319)
         Join Filter: (orders.o_custkey = nation.n_regionkey)
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
         ->  Materialize  (cost=0.00..431.00 rows=1 width=185)
               ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
                     Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(9 rows)

set pg_orca.enable_orca to off;
select query as query1 from tpch_queries(1); \gset
                                  query1                                  
--------------------------------------------------------------------------
 SELECT                                                                  +
     l_returnflag,                                                       +
     l_linestatus,                                                       +
     sum(l_quantity) AS sum_qty,                                         +
     sum(l_extendedprice) AS sum_base_price,                             +
     sum(l_extendedprice * (1 - l_discount)) AS sum_disc_price,          +
     sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS sum_charge,+
     avg(l_quantity) AS avg_qty,                                         +
     avg(l_extendedprice) AS avg_price,                                  +
     avg(l_discount) AS avg_disc,                                        +
     count(*) AS count_order                                             +
 FROM                                                                    +
     lineitem                                                            +
 WHERE                                                                   +
     l_shipdate <= CAST('1998-09-02' AS date)                            +
 GROUP BY                                                                +
     l_returnflag,                                                       +
     l_linestatus                                                        +
 ORDER BY                                                                +
     l_returnflag,                                                       +
     l_linestatus;                                                       +
 
(1 row)

select query as query2 from tpch_queries(2); \gset
                  query2                   
-------------------------------------------
 SELECT                                   +
     s_acctbal,                           +
     s_name,                              +
     n_name,                              +
     p_partkey,                           +
     p_mfgr,                              +
     s_address,                           +
     s_phone,                             +
     s_comment                            +
 FROM                                     +
     part,                                +
     supplier,                            +
     partsupp,                            +
     nation,                              +
     region                               +
 WHERE                                    +
     p_partkey = ps_partkey               +
     AND s_suppkey = ps_suppkey           +
     AND p_size = 15                      +
     AND p_type LIKE '%BRASS'             +
     AND s_nationkey = n_nationkey        +
     AND n_regionkey = r_regionkey        +
     AND r_name = 'EUROPE'                +
     AND ps_supplycost = (                +
         SELECT                           +
             min(ps_supplycost)           +
         FROM                             +
             partsupp,                    +
             supplier,                    +
             nation,                      +
             region                       +
         WHERE                            +
             p_partkey = ps_partkey       +
             AND s_suppkey = ps_suppkey   +
             AND s_nationkey = n_nationkey+
             AND n_regionkey = r_regionkey+
             AND r_name = 'EUROPE')       +
 ORDER BY                                 +
     s_acctbal DESC,                      +
     n_name,                              +
     s_name,                              +
     p_partkey                            +
 LIMIT 100;                               +
 
(1 row)

select query as query3 from tpch_queries(3); \gset
                         query3                          
---------------------------------------------------------
 SELECT                                                 +
     l_orderkey,                                        +
     sum(l_extendedprice * (1 - l_discount)) AS revenue,+
     o_orderdate,                                       +
     o_shippriority                                     +
 FROM                                                   +
     customer,                                          +
     orders,                                            +
     lineitem                                           +
 WHERE                                                  +
     c_mktsegment = 'BUILDING'                          +
     AND c_custkey = o_custkey                          +
     AND l_orderkey = o_orderkey                        +
     AND o_orderdate < CAST('1995-03-15' AS date)       +
     AND l_shipdate > CAST('1995-03-15' AS date)        +
 GROUP BY                                               +
     l_orderkey,                                        +
     o_orderdate,                                       +
     o_shippriority                                     +
 ORDER BY                                               +
     revenue DESC,                                      +
     o_orderdate                                        +
 LIMIT 10;                                              +
 
(1 row)

select query as query4 from tpch_queries(4); \gset
                      query4                      
--------------------------------------------------
 SELECT                                          +
     o_orderpriority,                            +
     count(*) AS order_count                     +
 FROM                                            +
     orders                                      +
 WHERE                                           +
     o_orderdate >= CAST('1993-07-01' AS date)   +
     AND o_orderdate < CAST('1993-10-01' AS date)+
     AND EXISTS (                                +
         SELECT                                  +
             *                                   +
         FROM                                    +
             lineitem                            +
         WHERE                                   +
             l_orderkey = o_orderkey             +
             AND l_commitdate < l_receiptdate)   +
 GROUP BY                                        +
     o_orderpriority                             +
 ORDER BY                                        +
     o_orderpriority;                            +
 
(1 row)

select query as query5 from tpch_queries(5); \gset
                         query5                         
--------------------------------------------------------
 SELECT                                                +
     n_name,                                           +
     sum(l_extendedprice * (1 - l_discount)) AS revenue+
 FROM                                                  +
     customer,                                         +
     orders,                                           +
     lineitem,                                         +
     supplier,                                         +
     nation,                                           +
     region                                            +
 WHERE                                                 +
     c_custkey = o_custkey                             +
     AND l_orderkey = o_orderkey                       +
     AND l_suppkey = s_suppkey                         +
     AND c_nationkey = s_nationkey                     +
     AND s_nationkey = n_nationkey                     +
     AND n_regionkey = r_regionkey                     +
     AND r_name = 'ASIA'                               +
     AND o_orderdate >= CAST('1994-01-01' AS date)     +
     AND o_orderdate < CAST('1995-01-01' AS date)      +
 GROUP BY                                              +
     n_name                                            +
 ORDER BY                                              +
     revenue DESC;                                     +
 
(1 row)

select query as query6 from tpch_queries(6); \gset
                      query6                      
--------------------------------------------------
 SELECT                                          +
     sum(l_extendedprice * l_discount) AS revenue+
 FROM                                            +
     lineitem                                    +
 WHERE                                           +
     l_shipdate >= CAST('1994-01-01' AS date)    +
     AND l_shipdate < CAST('1995-01-01' AS date) +
     AND l_discount BETWEEN 0.05                 +
     AND 0.07                                    +
     AND l_quantity < 24;                        +
 
(1 row)

select query as query7 from tpch_queries(7); \gset
                          query7                           
-----------------------------------------------------------
 SELECT                                                   +
     supp_nation,                                         +
     cust_nation,                                         +
     l_year,                                              +
     sum(volume) AS revenue                               +
 FROM (                                                   +
     SELECT                                               +
         n1.n_name AS supp_nation,                        +
         n2.n_name AS cust_nation,                        +
         extract(year FROM l_shipdate) AS l_year,         +
         l_extendedprice * (1 - l_discount) AS volume     +
     FROM                                                 +
         supplier,                                        +
         lineitem,                                        +
         orders,                                          +
         customer,                                        +
         nation n1,                                       +
         nation n2                                        +
     WHERE                                                +
         s_suppkey = l_suppkey                            +
         AND o_orderkey = l_orderkey                      +
         AND c_custkey = o_custkey                        +
         AND s_nationkey = n1.n_nationkey                 +
         AND c_nationkey = n2.n_nationkey                 +
         AND ((n1.n_name = 'FRANCE'                       +
                 AND n2.n_name = 'GERMANY')               +
             OR (n1.n_name = 'GERMANY'                    +
                 AND n2.n_name = 'FRANCE'))               +
         AND l_shipdate BETWEEN CAST('1995-01-01' AS date)+
         AND CAST('1996-12-31' AS date)) AS shipping      +
 GROUP BY                                                 +
     supp_nation,                                         +
     cust_nation,                                         +
     l_year                                               +
 ORDER BY                                                 +
     supp_nation,                                         +
     cust_nation,                                         +
     l_year;                                              +
 
(1 row)

select query as query8 from tpch_queries(8); \gset
                            query8                             
---------------------------------------------------------------
 SELECT                                                       +
     o_year,                                                  +
     sum(                                                     +
         CASE WHEN nation = 'BRAZIL' THEN                     +
             volume                                           +
         ELSE                                                 +
             0                                                +
         END) / sum(volume) AS mkt_share                      +
 FROM (                                                       +
     SELECT                                                   +
         extract(year FROM o_orderdate) AS o_year,            +
         l_extendedprice * (1 - l_discount) AS volume,        +
         n2.n_name AS nation                                  +
     FROM                                                     +
         part,                                                +
         supplier,                                            +
         lineitem,                                            +
         orders,                                              +
         customer,                                            +
         nation n1,                                           +
         nation n2,                                           +
         region                                               +
     WHERE                                                    +
         p_partkey = l_partkey                                +
         AND s_suppkey = l_suppkey                            +
         AND l_orderkey = o_orderkey                          +
         AND o_custkey = c_custkey                            +
         AND c_nationkey = n1.n_nationkey                     +
         AND n1.n_regionkey = r_regionkey                     +
         AND r_name = 'AMERICA'                               +
         AND s_nationkey = n2.n_nationkey                     +
         AND o_orderdate BETWEEN CAST('1995-01-01' AS date)   +
         AND CAST('1996-12-31' AS date)                       +
         AND p_type = 'ECONOMY ANODIZED STEEL') AS all_nations+
 GROUP BY                                                     +
     o_year                                                   +
 ORDER BY                                                     +
     o_year;                                                  +
 
(1 row)

select query as query9 from tpch_queries(9); \gset
                                      query9                                       
-----------------------------------------------------------------------------------
 SELECT                                                                           +
     nation,                                                                      +
     o_year,                                                                      +
     sum(amount) AS sum_profit                                                    +
 FROM (                                                                           +
     SELECT                                                                       +
         n_name AS nation,                                                        +
         extract(year FROM o_orderdate) AS o_year,                                +
         l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS amount+
     FROM                                                                         +
         part,                                                                    +
         supplier,                                                                +
         lineitem,                                                                +
         partsupp,                                                                +
         orders,                                                                  +
         nation                                                                   +
     WHERE                                                                        +
         s_suppkey = l_suppkey                                                    +
         AND ps_suppkey = l_suppkey                                               +
         AND ps_partkey = l_partkey                                               +
         AND p_partkey = l_partkey                                                +
         AND o_orderkey = l_orderkey                                              +
         AND s_nationkey = n_nationkey                                            +
         AND p_name LIKE '%green%') AS profit                                     +
 GROUP BY                                                                         +
     nation,                                                                      +
     o_year                                                                       +
 ORDER BY                                                                         +
     nation,                                                                      +
     o_year DESC;                                                                 +
 
(1 row)

select query as query10 from tpch_queries(10); \gset
                         query10                         
---------------------------------------------------------
 SELECT                                                 +
     c_custkey,                                         +
     c_name,                                            +
     sum(l_extendedprice * (1 - l_discount)) AS revenue,+
     c_acctbal,                                         +
     n_name,                                            +
     c_address,                                         +
     c_phone,                                           +
     c_comment                                          +
 FROM                                                   +
     customer,                                          +
     orders,                                            +
     lineitem,                                          +
     nation                                             +
 WHERE                                                  +
     c_custkey = o_custkey                              +
     AND l_orderkey = o_orderkey                        +
     AND o_orderdate >= CAST('1993-10-01' AS date)      +
     AND o_orderdate < CAST('1994-01-01' AS date)       +
     AND l_returnflag = 'R'                             +
     AND c_nationkey = n_nationkey                      +
 GROUP BY                                               +
     c_custkey,                                         +
     c_name,                                            +
     c_acctbal,                                         +
     c_phone,                                           +
     n_name,                                            +
     c_address,                                         +
     c_comment                                          +
 ORDER BY                                               +
     revenue DESC                                       +
 LIMIT 20;                                              +
 
(1 row)

select query as query11 from tpch_queries(11); \gset
                           query11                           
-------------------------------------------------------------
 SELECT                                                     +
     ps_partkey,                                            +
     sum(ps_supplycost * ps_availqty) AS value              +
 FROM                                                       +
     partsupp,                                              +
     supplier,                                              +
     nation                                                 +
 WHERE                                                      +
     ps_suppkey = s_suppkey                                 +
     AND s_nationkey = n_nationkey                          +
     AND n_name = 'GERMANY'                                 +
 GROUP BY                                                   +
     ps_partkey                                             +
 HAVING                                                     +
     sum(ps_supplycost * ps_availqty) > (                   +
         SELECT                                             +
             sum(ps_supplycost * ps_availqty) * 0.0001000000+
         FROM                                               +
             partsupp,                                      +
             supplier,                                      +
             nation                                         +
         WHERE                                              +
             ps_suppkey = s_suppkey                         +
             AND s_nationkey = n_nationkey                  +
             AND n_name = 'GERMANY')                        +
 ORDER BY                                                   +
     value DESC;                                            +
 
(1 row)

select query as query12 from tpch_queries(12); \gset
                       query12                       
-----------------------------------------------------
 SELECT                                             +
     l_shipmode,                                    +
     sum(                                           +
         CASE WHEN o_orderpriority = '1-URGENT'     +
             OR o_orderpriority = '2-HIGH' THEN     +
             1                                      +
         ELSE                                       +
             0                                      +
         END) AS high_line_count,                   +
     sum(                                           +
         CASE WHEN o_orderpriority <> '1-URGENT'    +
             AND o_orderpriority <> '2-HIGH' THEN   +
             1                                      +
         ELSE                                       +
             0                                      +
         END) AS low_line_count                     +
 FROM                                               +
     orders,                                        +
     lineitem                                       +
 WHERE                                              +
     o_orderkey = l_orderkey                        +
     AND l_shipmode IN ('MAIL', 'SHIP')             +
     AND l_commitdate < l_receiptdate               +
     AND l_shipdate < l_commitdate                  +
     AND l_receiptdate >= CAST('1994-01-01' AS date)+
     AND l_receiptdate < CAST('1995-01-01' AS date) +
 GROUP BY                                           +
     l_shipmode                                     +
 ORDER BY                                           +
     l_shipmode;                                    +
 
(1 row)

select query as query13 from tpch_queries(13); \gset
                       query13                       
-----------------------------------------------------
 SELECT                                             +
     c_count,                                       +
     count(*) AS custdist                           +
 FROM (                                             +
     SELECT                                         +
         c_custkey,                                 +
         count(o_orderkey)                          +
     FROM                                           +
         customer                                   +
     LEFT OUTER JOIN orders ON c_custkey = o_custkey+
     AND o_comment NOT LIKE '%special%requests%'    +
 GROUP BY                                           +
     c_custkey) AS c_orders (c_custkey,             +
         c_count)                                   +
 GROUP BY                                           +
     c_count                                        +
 ORDER BY                                           +
     custdist DESC,                                 +
     c_count DESC;                                  +
 
(1 row)

select query as query14 from tpch_queries(14); \gset
                                 query14                                 
-------------------------------------------------------------------------
 SELECT                                                                 +
     100.00 * sum(                                                      +
         CASE WHEN p_type LIKE 'PROMO%' THEN                            +
             l_extendedprice * (1 - l_discount)                         +
         ELSE                                                           +
             0                                                          +
         END) / sum(l_extendedprice * (1 - l_discount)) AS promo_revenue+
 FROM                                                                   +
     lineitem,                                                          +
     part                                                               +
 WHERE                                                                  +
     l_partkey = p_partkey                                              +
     AND l_shipdate >= date '1995-09-01'                                +
     AND l_shipdate < CAST('1995-10-01' AS date);                       +
 
(1 row)

select query as query15 from tpch_queries(15); \gset
                                 query15                                  
--------------------------------------------------------------------------
 SELECT                                                                  +
     s_suppkey,                                                          +
     s_name,                                                             +
     s_address,                                                          +
     s_phone,                                                            +
     total_revenue                                                       +
 FROM                                                                    +
     supplier,                                                           +
     (                                                                   +
         SELECT                                                          +
             l_suppkey AS supplier_no,                                   +
             sum(l_extendedprice * (1 - l_discount)) AS total_revenue    +
         FROM                                                            +
             lineitem                                                    +
         WHERE                                                           +
             l_shipdate >= CAST('1996-01-01' AS date)                    +
             AND l_shipdate < CAST('1996-04-01' AS date)                 +
         GROUP BY                                                        +
             supplier_no) revenue0                                       +
 WHERE                                                                   +
     s_suppkey = supplier_no                                             +
     AND total_revenue = (                                               +
         SELECT                                                          +
             max(total_revenue)                                          +
         FROM (                                                          +
             SELECT                                                      +
                 l_suppkey AS supplier_no,                               +
                 sum(l_extendedprice * (1 - l_discount)) AS total_revenue+
             FROM                                                        +
                 lineitem                                                +
             WHERE                                                       +
                 l_shipdate >= CAST('1996-01-01' AS date)                +
                 AND l_shipdate < CAST('1996-04-01' AS date)             +
             GROUP BY                                                    +
                 supplier_no) revenue1)                                  +
 ORDER BY                                                                +
     s_suppkey;                                                          +
 
(1 row)

select query as query16 from tpch_queries(16); \gset
                       query16                       
-----------------------------------------------------
 SELECT                                             +
     p_brand,                                       +
     p_type,                                        +
     p_size,                                        +
     count(DISTINCT ps_suppkey) AS supplier_cnt     +
 FROM                                               +
     partsupp,                                      +
     part                                           +
 WHERE                                              +
     p_partkey = ps_partkey                         +
     AND p_brand <> 'Brand#45'                      +
     AND p_type NOT LIKE 'MEDIUM POLISHED%'         +
     AND p_size IN (49, 14, 23, 45, 19, 3, 36, 9)   +
     AND ps_suppkey NOT IN (                        +
         SELECT                                     +
             s_suppkey                              +
         FROM                                       +
             supplier                               +
         WHERE                                      +
             s_comment LIKE '%Customer%Complaints%')+
 GROUP BY                                           +
     p_brand,                                       +
     p_type,                                        +
     p_size                                         +
 ORDER BY                                           +
     supplier_cnt DESC,                             +
     p_brand,                                       +
     p_type,                                        +
     p_size;                                        +
 
(1 row)

select query as query17 from tpch_queries(17); \gset
                   query17                    
----------------------------------------------
 SELECT                                      +
     sum(l_extendedprice) / 7.0 AS avg_yearly+
 FROM                                        +
     lineitem,                               +
     part                                    +
 WHERE                                       +
     p_partkey = l_partkey                   +
     AND p_brand = 'Brand#23'                +
     AND p_container = 'MED BOX'             +
     AND l_quantity < (                      +
         SELECT                              +
             0.2 * avg(l_quantity)           +
         FROM                                +
             lineitem                        +
         WHERE                               +
             l_partkey = p_partkey);         +
 
(1 row)

select query as query18 from tpch_queries(18); \gset
              query18               
------------------------------------
 SELECT                            +
     c_name,                       +
     c_custkey,                    +
     o_orderkey,                   +
     o_orderdate,                  +
     o_totalprice,                 +
     sum(l_quantity)               +
 FROM                              +
     customer,                     +
     orders,                       +
     lineitem                      +
 WHERE                             +
     o_orderkey IN (               +
         SELECT                    +
             l_orderkey            +
         FROM                      +
             lineitem              +
         GROUP BY                  +
             l_orderkey            +
         HAVING                    +
             sum(l_quantity) > 300)+
     AND c_custkey = o_custkey     +
     AND o_orderkey = l_orderkey   +
 GROUP BY                          +
     c_name,                       +
     c_custkey,                    +
     o_orderkey,                   +
     o_orderdate,                  +
     o_totalprice                  +
 ORDER BY                          +
     o_totalprice DESC,            +
     o_orderdate                   +
 LIMIT 100;                        +
 
(1 row)

select query as query19 from tpch_queries(19); \gset
                                 query19                                  
--------------------------------------------------------------------------
 SELECT                                                                  +
     sum(l_extendedprice * (1 - l_discount)) AS revenue                  +
 FROM                                                                    +
     lineitem,                                                           +
     part                                                                +
 WHERE (p_partkey = l_partkey                                            +
     AND p_brand = 'Brand#12'                                            +
     AND p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG')       +
     AND l_quantity >= 1                                                 +
     AND l_quantity <= 1 + 10                                            +
     AND p_size BETWEEN 1 AND 5                                          +
     AND l_shipmode IN ('AIR', 'AIR REG')                                +
     AND l_shipinstruct = 'DELIVER IN PERSON')                           +
     OR (p_partkey = l_partkey                                           +
         AND p_brand = 'Brand#23'                                        +
         AND p_container IN ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK')+
         AND l_quantity >= 10                                            +
         AND l_quantity <= 10 + 10                                       +
         AND p_size BETWEEN 1 AND 10                                     +
         AND l_shipmode IN ('AIR', 'AIR REG')                            +
         AND l_shipinstruct = 'DELIVER IN PERSON')                       +
     OR (p_partkey = l_partkey                                           +
         AND p_brand = 'Brand#34'                                        +
         AND p_container IN ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG')   +
         AND l_quantity >= 20                                            +
         AND l_quantity <= 20 + 10                                       +
         AND p_size BETWEEN 1 AND 15                                     +
         AND l_shipmode IN ('AIR', 'AIR REG')                            +
         AND l_shipinstruct = 'DELIVER IN PERSON');                      +
 
(1 row)

select query as query20 from tpch_queries(20); \gset
                                query20                                
-----------------------------------------------------------------------
 SELECT                                                               +
     s_name,                                                          +
     s_address                                                        +
 FROM                                                                 +
     supplier,                                                        +
     nation                                                           +
 WHERE                                                                +
     s_suppkey IN (                                                   +
         SELECT                                                       +
             ps_suppkey                                               +
         FROM                                                         +
             partsupp                                                 +
         WHERE                                                        +
             ps_partkey IN (                                          +
                 SELECT                                               +
                     p_partkey                                        +
                 FROM                                                 +
                     part                                             +
                 WHERE                                                +
                     p_name LIKE 'forest%')                           +
                 AND ps_availqty > (                                  +
                     SELECT                                           +
                         0.5 * sum(l_quantity)                        +
                     FROM                                             +
                         lineitem                                     +
                     WHERE                                            +
                         l_partkey = ps_partkey                       +
                         AND l_suppkey = ps_suppkey                   +
                         AND l_shipdate >= CAST('1994-01-01' AS date) +
                         AND l_shipdate < CAST('1995-01-01' AS date)))+
             AND s_nationkey = n_nationkey                            +
             AND n_name = 'CANADA'                                    +
         ORDER BY                                                     +
             s_name;                                                  +
 
(1 row)

select query as query21 from tpch_queries(21); \gset
                       query21                       
-----------------------------------------------------
 SELECT                                             +
     s_name,                                        +
     count(*) AS numwait                            +
 FROM                                               +
     supplier,                                      +
     lineitem l1,                                   +
     orders,                                        +
     nation                                         +
 WHERE                                              +
     s_suppkey = l1.l_suppkey                       +
     AND o_orderkey = l1.l_orderkey                 +
     AND o_orderstatus = 'F'                        +
     AND l1.l_receiptdate > l1.l_commitdate         +
     AND EXISTS (                                   +
         SELECT                                     +
             *                                      +
         FROM                                       +
             lineitem l2                            +
         WHERE                                      +
             l2.l_orderkey = l1.l_orderkey          +
             AND l2.l_suppkey <> l1.l_suppkey)      +
     AND NOT EXISTS (                               +
         SELECT                                     +
             *                                      +
         FROM                                       +
             lineitem l3                            +
         WHERE                                      +
             l3.l_orderkey = l1.l_orderkey          +
             AND l3.l_suppkey <> l1.l_suppkey       +
             AND l3.l_receiptdate > l3.l_commitdate)+
     AND s_nationkey = n_nationkey                  +
     AND n_name = 'SAUDI ARABIA'                    +
 GROUP BY                                           +
     s_name                                         +
 ORDER BY                                           +
     numwait DESC,                                  +
     s_name                                         +
 LIMIT 100;                                         +
 
(1 row)

select query as query22 from tpch_queries(22); \gset
                                              query22                                               
----------------------------------------------------------------------------------------------------
 SELECT                                                                                            +
     cntrycode,                                                                                    +
     count(*) AS numcust,                                                                          +
     sum(c_acctbal) AS totacctbal                                                                  +
 FROM (                                                                                            +
     SELECT                                                                                        +
         substring(c_phone FROM 1 FOR 2) AS cntrycode,                                             +
         c_acctbal                                                                                 +
     FROM                                                                                          +
         customer                                                                                  +
     WHERE                                                                                         +
         substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17')             +
         AND c_acctbal > (                                                                         +
             SELECT                                                                                +
                 avg(c_acctbal)                                                                    +
             FROM                                                                                  +
                 customer                                                                          +
             WHERE                                                                                 +
                 c_acctbal > 0.00                                                                  +
                 AND substring(c_phone FROM 1 FOR 2) IN ('13', '31', '23', '29', '30', '18', '17'))+
             AND NOT EXISTS (                                                                      +
                 SELECT                                                                            +
                     *                                                                             +
                 FROM                                                                              +
                     orders                                                                        +
                 WHERE                                                                             +
                     o_custkey = c_custkey)) AS custsale                                           +
 GROUP BY                                                                                          +
     cntrycode                                                                                     +
 ORDER BY                                                                                          +
     cntrycode;                                                                                    +
 
(1 row)

set pg_orca.enable_orca to on;
explain (costs off ) :query1;
                        QUERY PLAN                        
----------------------------------------------------------
 GroupAggregate
   Group Key: l_returnflag, l_linestatus
   ->  Sort
         Sort Key: l_returnflag, l_linestatus
         ->  Seq Scan on lineitem
               Filter: (l_shipdate <= '09-02-1998'::date)
 Optimizer: pg_orca
(7 rows)

:query1;
 l_returnflag | l_linestatus | sum_qty | sum_base_price | sum_disc_price | sum_charge | avg_qty | avg_price | avg_disc | count_order 
--------------+--------------+---------+----------------+----------------+------------+---------+-----------+----------+-------------
(0 rows)

explain (costs off ) :query2;
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Nested Loop
         Join Filter: (nation.n_regionkey = region.r_regionkey)
         ->  Sort
               Sort Key: supplier.s_acctbal DESC, nation.n_name, supplier.s_name, part.p_partkey
               ->  Nested Loop
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop
                           Join Filter: ((part.p_partkey = partsupp.ps_partkey) AND (supplier.s_suppkey = partsupp.ps_suppkey) AND (partsupp.ps_supplycost = ((SubPlan 1))))
                           ->  Nested Loop
                                 Join Filter: true
                                 ->  Result
                                       ->  Seq Scan on part
                                             Filter: ((p_size = 15) AND ((p_type)::text ~~ '%BRASS'::text))
                                       SubPlan 1
                                         ->  Aggregate
                                               ->  Result
                                                     Filter: (part.p_partkey = partsupp_1.ps_partkey)
                                                     ->  Nested Loop
                                                           Join Filter: (nation_1.n_regionkey = region_1.r_regionkey)
                                                           ->  Nested Loop
                                                                 Join Filter: (supplier_1.s_nationkey = nation_1.n_nationkey)
                                                                 ->  Nested Loop
                                                                       Join Filter: (supplier_1.s_suppkey = partsupp_1.ps_suppkey)
                                                                       ->  Seq Scan on partsupp partsupp_1
                                                                       ->  Seq Scan on supplier supplier_1
                                                                 ->  Seq Scan on nation nation_1
                                                           ->  Materialize
                                                                 ->  Seq Scan on region region_1
                                                                       Filter: (r_name = 'EUROPE'::bpchar)
                                 ->  Seq Scan on supplier
                           ->  Seq Scan on partsupp
                     ->  Seq Scan on nation
         ->  Materialize
               ->  Seq Scan on region
                     Filter: (r_name = 'EUROPE'::bpchar)
 Optimizer: pg_orca
(37 rows)

:query2;
 s_acctbal | s_name | n_name | p_partkey | p_mfgr | s_address | s_phone | s_comment 
-----------+--------+--------+-----------+--------+-----------+---------+-----------
(0 rows)

explain (costs off ) :query3;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: (sum((lineitem.l_extendedprice * ((1)::numeric - lineitem.l_discount)))) DESC, orders.o_orderdate
         ->  GroupAggregate
               Group Key: orders.o_orderdate, lineitem.l_orderkey, orders.o_shippriority
               ->  Sort
                     Sort Key: orders.o_orderdate, lineitem.l_orderkey, orders.o_shippriority
                     ->  Nested Loop
                           Join Filter: (lineitem.l_orderkey = orders.o_orderkey)
                           ->  Nested Loop
                                 Join Filter: (customer.c_custkey = orders.o_custkey)
                                 ->  Seq Scan on customer
                                       Filter: (c_mktsegment = 'BUILDING'::bpchar)
                                 ->  Materialize
                                       ->  Seq Scan on orders
                                             Filter: (o_orderdate < '03-15-1995'::date)
                           ->  Materialize
                                 ->  Seq Scan on lineitem
                                       Filter: (l_shipdate > '03-15-1995'::date)
 Optimizer: pg_orca
(20 rows)

:query3;
 l_orderkey | revenue | o_orderdate | o_shippriority 
------------+---------+-------------+----------------
(0 rows)

explain (costs off ) :query4;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group Key: orders.o_orderpriority
   ->  Sort
         Sort Key: orders.o_orderpriority
         ->  Seq Scan on orders
               Filter: (((o_orderdate >= '07-01-1993'::date) AND (o_orderdate < '10-01-1993'::date)) AND EXISTS(SubPlan 1))
               SubPlan 1
                 ->  Result
                       Filter: (lineitem.l_orderkey = orders.o_orderkey)
                       ->  Seq Scan on lineitem
                             Filter: (l_commitdate < l_receiptdate)
 Optimizer: pg_orca
(12 rows)

:query4;
 o_orderpriority | order_count 
-----------------+-------------
(0 rows)

explain (costs off ) :query5;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (sum((lineitem.l_extendedprice * ((1)::numeric - lineitem.l_discount)))) DESC
   ->  GroupAggregate
         Group Key: nation.n_name
         ->  Nested Loop
               Join Filter: (nation.n_regionkey = region.r_regionkey)
               ->  Sort
                     Sort Key: nation.n_name
                     ->  Nested Loop
                           Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop
                                 Join Filter: ((lineitem.l_suppkey = supplier.s_suppkey) AND (customer.c_nationkey = supplier.s_nationkey))
                                 ->  Nested Loop
                                       Join Filter: (lineitem.l_orderkey = orders.o_orderkey)
                                       ->  Nested Loop
                                             Join Filter: (customer.c_custkey = orders.o_custkey)
                                             ->  Seq Scan on customer
                                             ->  Materialize
                                                   ->  Seq Scan on orders
                                                         Filter: ((o_orderdate >= '01-01-1994'::date) AND (o_orderdate < '01-01-1995'::date))
                                       ->  Seq Scan on lineitem
                                 ->  Seq Scan on supplier
                           ->  Seq Scan on nation
               ->  Materialize
                     ->  Seq Scan on region
                           Filter: (r_name = 'ASIA'::bpchar)
 Optimizer: pg_orca
(27 rows)

:query5;
 n_name | revenue 
--------+---------
(0 rows)

explain (costs off ) :query6;
                                                                                  QUERY PLAN                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   ->  Seq Scan on lineitem
         Filter: ((l_shipdate >= '01-01-1994'::date) AND (l_shipdate < '01-01-1995'::date) AND (l_discount >= 0.05) AND (l_discount <= 0.07) AND (l_quantity < (24)::numeric))
 Optimizer: pg_orca
(4 rows)

:query6;
 revenue 
---------
        
(1 row)

explain (costs off ) :query7;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group Key: n1.n_name, n2.n_name, ("extract"('year'::text, lineitem.l_shipdate))
   ->  Sort
         Sort Key: n1.n_name, n2.n_name, ("extract"('year'::text, lineitem.l_shipdate))
         ->  Result
               ->  Nested Loop
                     Join Filter: ((customer.c_nationkey = n2.n_nationkey) AND (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar))))
                     ->  Nested Loop
                           Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                           ->  Nested Loop
                                 Join Filter: (customer.c_custkey = orders.o_custkey)
                                 ->  Nested Loop
                                       Join Filter: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Nested Loop
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Seq Scan on supplier
                                             ->  Materialize
                                                   ->  Seq Scan on lineitem
                                                         Filter: ((l_shipdate >= '01-01-1995'::date) AND (l_shipdate <= '12-31-1996'::date))
                                       ->  Seq Scan on orders
                                 ->  Seq Scan on customer
                           ->  Materialize
                                 ->  Seq Scan on nation n1
                                       Filter: ((n_name = 'FRANCE'::bpchar) OR (n_name = 'GERMANY'::bpchar))
                     ->  Materialize
                           ->  Seq Scan on nation n2
                                 Filter: ((n_name = 'GERMANY'::bpchar) OR (n_name = 'FRANCE'::bpchar))
 Optimizer: pg_orca
(28 rows)

:query7;
 supp_nation | cust_nation | l_year | revenue 
-------------+-------------+--------+---------
(0 rows)

-- explain (costs off ) :query8;
-- :query8;
explain (costs off ) :query9;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group Key: nation.n_name, ("extract"('year'::text, orders.o_orderdate))
   ->  Sort
         Sort Key: nation.n_name, ("extract"('year'::text, orders.o_orderdate)) DESC
         ->  Result
               ->  Nested Loop
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop
                           Join Filter: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Nested Loop
                                 Join Filter: ((partsupp.ps_suppkey = lineitem.l_suppkey) AND (partsupp.ps_partkey = lineitem.l_partkey))
                                 ->  Nested Loop
                                       Join Filter: ((supplier.s_suppkey = lineitem.l_suppkey) AND (part.p_partkey = lineitem.l_partkey))
                                       ->  Nested Loop
                                             Join Filter: true
                                             ->  Seq Scan on part
                                                   Filter: ((p_name)::text ~~ '%green%'::text)
                                             ->  Seq Scan on supplier
                                       ->  Seq Scan on lineitem
                                 ->  Seq Scan on partsupp
                           ->  Seq Scan on orders
                     ->  Seq Scan on nation
 Optimizer: pg_orca
(23 rows)

:query9;
 nation | o_year | sum_profit 
--------+--------+------------
(0 rows)

explain (costs off ) :query10;
                                                                           QUERY PLAN                                                                           
----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: (sum((lineitem.l_extendedprice * ((1)::numeric - lineitem.l_discount)))) DESC
         ->  GroupAggregate
               Group Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
               ->  Sort
                     Sort Key: customer.c_custkey, customer.c_name, customer.c_acctbal, customer.c_phone, nation.n_name, customer.c_address, customer.c_comment
                     ->  Nested Loop
                           Join Filter: (customer.c_nationkey = nation.n_nationkey)
                           ->  Nested Loop
                                 Join Filter: (lineitem.l_orderkey = orders.o_orderkey)
                                 ->  Nested Loop
                                       Join Filter: (customer.c_custkey = orders.o_custkey)
                                       ->  Seq Scan on customer
                                       ->  Materialize
                                             ->  Seq Scan on orders
                                                   Filter: ((o_orderdate >= '10-01-1993'::date) AND (o_orderdate < '01-01-1994'::date))
                                 ->  Materialize
                                       ->  Seq Scan on lineitem
                                             Filter: (l_returnflag = 'R'::bpchar)
                           ->  Seq Scan on nation
 Optimizer: pg_orca
(22 rows)

:query10;
 c_custkey | c_name | revenue | c_acctbal | n_name | c_address | c_phone | c_comment 
-----------+--------+---------+-----------+--------+-----------+---------+-----------
(0 rows)

explain (costs off ) :query11;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Sort Key: (sum((partsupp.ps_supplycost * (partsupp.ps_availqty)::numeric))) DESC
   ->  GroupAggregate
         Group Key: partsupp.ps_partkey
         ->  Sort
               Sort Key: partsupp.ps_partkey
               ->  Nested Loop
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Nested Loop
                           Join Filter: (partsupp.ps_suppkey = supplier.s_suppkey)
                           ->  Seq Scan on partsupp
                           ->  Seq Scan on supplier
                     ->  Materialize
                           ->  Seq Scan on nation
                                 Filter: (n_name = 'GERMANY'::bpchar)
 Optimizer: pg_orca
(16 rows)

:query11;
 ps_partkey | value 
------------+-------
(0 rows)

explain (costs off ) :query12;
                                                                                                               QUERY PLAN                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group Key: lineitem.l_shipmode
   ->  Sort
         Sort Key: lineitem.l_shipmode
         ->  Nested Loop
               Join Filter: (orders.o_orderkey = lineitem.l_orderkey)
               ->  Seq Scan on orders
               ->  Materialize
                     ->  Seq Scan on lineitem
                           Filter: ((l_shipmode = ANY ('{MAIL,SHIP}'::bpchar[])) AND (l_commitdate < l_receiptdate) AND (l_shipdate < l_commitdate) AND (l_receiptdate >= '01-01-1994'::date) AND (l_receiptdate < '01-01-1995'::date))
 Optimizer: pg_orca
(11 rows)

:query12;
 l_shipmode | high_line_count | low_line_count 
------------+-----------------+----------------
(0 rows)

explain (costs off ) :query13;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (count()) DESC, (count(orders.o_orderkey)) DESC
   ->  GroupAggregate
         Group Key: (count(orders.o_orderkey))
         ->  Sort
               Sort Key: (count(orders.o_orderkey))
               ->  GroupAggregate
                     Group Key: customer.c_custkey
                     ->  Sort
                           Sort Key: customer.c_custkey
                           ->  Nested Loop Left Join
                                 Join Filter: (customer.c_custkey = orders.o_custkey)
                                 ->  Seq Scan on customer
                                 ->  Materialize
                                       ->  Seq Scan on orders
                                             Filter: ((o_comment)::text !~~ '%special%requests%'::text)
 Optimizer: pg_orca
(17 rows)

:query13;
 c_count | custdist 
---------+----------
(0 rows)

-- explain (costs off ) :query14;
-- :query14;
explain (costs off ) :query15;
                                                         QUERY PLAN                                                         
----------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: supplier.s_suppkey
   ->  Nested Loop
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Seq Scan on supplier
         ->  Result
               Filter: ((sum((lineitem.l_extendedprice * ((1)::numeric - lineitem.l_discount)))) = (SubPlan 1))
               ->  GroupAggregate
                     Group Key: lineitem.l_suppkey
                     ->  Sort
                           Sort Key: lineitem.l_suppkey
                           ->  Seq Scan on lineitem
                                 Filter: ((l_shipdate >= '01-01-1996'::date) AND (l_shipdate < '04-01-1996'::date))
               SubPlan 1
                 ->  Aggregate
                       ->  GroupAggregate
                             Group Key: lineitem_1.l_suppkey
                             ->  Sort
                                   Sort Key: lineitem_1.l_suppkey
                                   ->  Seq Scan on lineitem lineitem_1
                                         Filter: ((l_shipdate >= '01-01-1996'::date) AND (l_shipdate < '04-01-1996'::date))
 Optimizer: pg_orca
(22 rows)

:query15;
 s_suppkey | s_name | s_address | s_phone | total_revenue 
-----------+--------+-----------+---------+---------------
(0 rows)

explain (costs off ) :query16;
                                                                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: (count(partsupp.ps_suppkey)) DESC, part.p_brand, part.p_type, part.p_size
   ->  GroupAggregate
         Group Key: part.p_brand, part.p_type, part.p_size
         ->  Sort
               Sort Key: part.p_brand, part.p_type, part.p_size
               ->  Nested Loop
                     Join Filter: (part.p_partkey = partsupp.ps_partkey)
                     ->  Seq Scan on partsupp
                           Filter: (SubPlan 1)
                           SubPlan 1
                             ->  Result
                                   ->  Result
                                         Filter: ((CASE WHEN ((sum((CASE WHEN (partsupp.ps_suppkey = supplier.s_suppkey) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (supplier.s_suppkey IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (partsupp.ps_suppkey IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (partsupp.ps_suppkey = supplier.s_suppkey) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END) = true)
                                         ->  Result
                                               ->  Aggregate
                                                     ->  Result
                                                           ->  Seq Scan on supplier
                                                                 Filter: ((s_comment)::text ~~ '%Customer%Complaints%'::text)
                     ->  Materialize
                           ->  Seq Scan on part
                                 Filter: ((p_brand <> 'Brand#45'::bpchar) AND ((p_type)::text !~~ 'MEDIUM POLISHED%'::text) AND (p_size = ANY ('{49,14,23,45,19,3,36,9}'::integer[])))
 Optimizer: pg_orca
(23 rows)

:query16;
 p_brand | p_type | p_size | supplier_cnt 
---------+--------+--------+--------------
(0 rows)

-- explain (costs off ) :query17;
-- :query17;
explain (costs off ) :query18;
                                                          QUERY PLAN                                                          
------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  GroupAggregate
         Group Key: orders.o_totalprice, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
         ->  Sort
               Sort Key: orders.o_totalprice DESC, orders.o_orderdate, customer.c_name, customer.c_custkey, orders.o_orderkey
               ->  Nested Loop
                     Join Filter: (orders.o_orderkey = lineitem.l_orderkey)
                     ->  Nested Loop
                           Join Filter: (customer.c_custkey = orders.o_custkey)
                           ->  Seq Scan on customer
                           ->  Seq Scan on orders
                                 Filter: (ANY (o_orderkey = (SubPlan 1).col1))
                                 SubPlan 1
                                   ->  Seq Scan on lineitem lineitem_1
                     ->  Seq Scan on lineitem
 Optimizer: pg_orca
(16 rows)

:query18;
 c_name | c_custkey | o_orderkey | o_orderdate | o_totalprice | sum 
--------+-----------+------------+-------------+--------------+-----
(0 rows)

explain (costs off ) :query19;


 Aggregate
   ->  Nested Loop
         Join Filter: ((part.p_partkey = lineitem.l_partkey) AND (((part.p_brand = 'Brand#12'::bpchar) AND (part.p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (lineitem.l_quantity >= (1)::numeric) AND (lineitem.l_quantity <= ((1 + 10))::numeric) AND (part.p_size <= 5)) OR ((part.p_brand = 'Brand#23'::bpchar) AND (part.p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (lineitem.l_quantity >= (10)::numeric) AND (lineitem.l_quantity <= ((10 + 10))::numeric) AND (part.p_size <= 10)) OR ((part.p_brand = 'Brand#34'::bpchar) AND (part.p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (lineitem.l_quantity >= (20)::numeric) AND (lineitem.l_quantity <= ((20 + 10))::numeric) AND (part.p_size <= 15))))
         ->  Seq Scan on lineitem
               Filter: ((l_shipmode = ANY ('{AIR,"AIR REG"}'::bpchar[])) AND (l_shipinstruct = 'DELIVER IN PERSON'::bpchar) AND (((l_quantity >= (1)::numeric) AND (l_quantity <= ((1 + 10))::numeric)) OR ((l_quantity >= (10)::numeric) AND (l_quantity <= ((10 + 10))::numeric)) OR ((l_quantity >= (20)::numeric) AND (l_quantity <= ((20 + 10))::numeric))))
         ->  Materialize
               ->  Seq Scan on part
                     Filter: ((p_size >= 1) AND (((p_brand = 'Brand#12'::bpchar) AND (p_container = ANY ('{"SM CASE","SM BOX","SM PACK","SM PKG"}'::bpchar[])) AND (p_size <= 5)) OR ((p_brand = 'Brand#23'::bpchar) AND (p_container = ANY ('{"MED BAG","MED BOX","MED PKG","MED PACK"}'::bpchar[])) AND (p_size <= 10)) OR ((p_brand = 'Brand#34'::bpchar) AND (p_container = ANY ('{"LG CASE","LG BOX","LG PACK","LG PKG"}'::bpchar[])) AND (p_size <= 15))))
 Optimizer: pg_orca
(9 rows)

:query19;
 revenue 
---------
        
(1 row)

-- explain (costs off ) :query20;
-- :query20;
explain (costs off ) :query21;
                                                                QUERY PLAN                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   ->  Sort
         Sort Key: (count()) DESC, supplier.s_name
         ->  GroupAggregate
               Group Key: supplier.s_name
               ->  Nested Loop
                     Join Filter: (supplier.s_nationkey = nation.n_nationkey)
                     ->  Sort
                           Sort Key: supplier.s_name
                           ->  Nested Loop
                                 Join Filter: (orders.o_orderkey = l1.l_orderkey)
                                 ->  Nested Loop
                                       Join Filter: (supplier.s_suppkey = l1.l_suppkey)
                                       ->  Seq Scan on supplier
                                       ->  Materialize
                                             ->  Nested Loop Anti Join
                                                   Join Filter: ((l3.l_orderkey = l1.l_orderkey) AND (l3.l_suppkey <> l1.l_suppkey))
                                                   ->  Nested Loop Semi Join
                                                         Join Filter: ((l2.l_orderkey = l1.l_orderkey) AND (l2.l_suppkey <> l1.l_suppkey))
                                                         ->  Seq Scan on lineitem l1
                                                               Filter: (l_receiptdate > l_commitdate)
                                                         ->  Seq Scan on lineitem l2
                                                   ->  Materialize
                                                         ->  Seq Scan on lineitem l3
                                                               Filter: (l_receiptdate > l_commitdate)
                                 ->  Materialize
                                       ->  Seq Scan on orders
                                             Filter: (o_orderstatus = 'F'::bpchar)
                     ->  Materialize
                           ->  Seq Scan on nation
                                 Filter: (n_name = 'SAUDI ARABIA'::bpchar)
 Optimizer: pg_orca
(32 rows)

:query21;
 s_name | numwait 
--------+---------
(0 rows)

explain (costs off ) :query22;
                                                                   QUERY PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Group Key: ("substring"((customer_1.c_phone)::text, 1, 2))
   ->  Sort
         Sort Key: ("substring"((customer_1.c_phone)::text, 1, 2))
         ->  Result
               ->  Nested Loop
                     Join Filter: (customer_1.c_acctbal > (avg(customer.c_acctbal)))
                     ->  Nested Loop Anti Join
                           Join Filter: (orders.o_custkey = customer_1.c_custkey)
                           ->  Seq Scan on customer customer_1
                                 Filter: ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[]))
                           ->  Seq Scan on orders
                     ->  Aggregate
                           ->  Seq Scan on customer
                                 Filter: ((c_acctbal > 0.00) AND ("substring"((c_phone)::text, 1, 2) = ANY ('{13,31,23,29,30,18,17}'::text[])))
 Optimizer: pg_orca
(16 rows)

:query22;
 cntrycode | numcust | totacctbal 
-----------+---------+------------
(0 rows)

select 1 where 1 in (2, 3);
 ?column? 
----------
(0 rows)

select 1;
 ?column? 
----------
        1
(1 row)

select 1 from generate_series(1,10);
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

