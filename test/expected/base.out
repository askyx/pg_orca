set pg_orca.enable_orca to off;
create extension pg_tpch;
 create table product
  (
          pn int not null,
          pname text not null,
          pcolor text,
 
          primary key (pn)
 
  ) ;
 
  create table sale
  (
          cn int not null,
          vn int not null,
          pn int not null,
         dt date not null,
          qty int not null,
          prc float not null,
 
          primary key (cn, vn, pn)
 
  ) ;
create table test_table(a int, b int );
alter table test_table add column c int;
explain select * from test_table;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on test_table  (cost=0.00..30.40 rows=2040 width=12)
(1 row)

alter table test_table drop column c;
alter table test_table add column c int;
set pg_orca.enable_orca to on;
set pg_orca.enable_new_planner TO on;
-- RTE_RESULT
values(1,2);
 column1 | column2 
---------+---------
       1 |       2
(1 row)

-- RTE_VALUES
values(1,2),(3,4);
 column1 | column2 
---------+---------
       1 |       2
       3 |       4
(2 rows)

-- values(1,2),(3,4 + 3);
explain verbose select from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(2 rows)

explain verbose select * from orders;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=134)
   Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_custkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey, o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_custkey, o_custkey
 Optimizer: pg_orca
(3 rows)

select n_regionkey as x, n_regionkey as y from nation;
 n_regionkey | n_regionkey 
-------------+-------------
(0 rows)

select;
   
---
 t
(1 row)

select 1, '1', 2 as x, 'xx' as x;
 ?column? | ?column? | x | x  
----------+----------+---+----
        1 | 1        | 2 | xx
(1 row)

explain verbose select 1 + 1;
                QUERY PLAN                
------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=4)
   Output: (1 + 1)
 Optimizer: pg_orca
(3 rows)

select 1, 1 + 1, true, null, array[1, 2, 3], array[[1], [2], [3]], '[1, 2, 3]';
 ?column? | ?column? | ?column? | ?column? |  array  |     array     | ?column?  
----------+----------+----------+----------+---------+---------------+-----------
        1 |        2 | t        |          | {1,2,3} | {{1},{2},{3}} | [1, 2, 3]
(1 row)

select 1::text;
 text 
------
 1
(1 row)

select '{1,2,3}'::integer[], 1::text, 1::int, 'a'::text, '99999999'::int;
  int4   | text | int4 | text |   int4   
---------+------+------+------+----------
 {1,2,3} | 1    |    1 | a    | 99999999
(1 row)

explain verbose select 1+1 = 3 * 10 and 2 > 1  or 1 is null where 1=1;
                          QUERY PLAN                           
---------------------------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=1)
   Output: ((((1 + 1) = (3 * 10)) AND (2 > 1)) OR (1 IS NULL))
   Filter: (1 = 1)
 Optimizer: pg_orca
(4 rows)

explain verbose  select o_orderkey from orders where o_custkey > 10 ;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_orderkey
   Filter: (orders.o_custkey > 10)
 Optimizer: pg_orca
(4 rows)

-- todo, PdxlnRemapOutputColumns
explain verbose select n_regionkey as x, n_regionkey as y from nation where n_regionkey < 10;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
   Output: n_regionkey
   Filter: (nation.n_regionkey < 10)
 Optimizer: pg_orca
(4 rows)

explain verbose select 1 where 1 in (2, 3);
                QUERY PLAN                
------------------------------------------
 Result  (cost=0.00..0.00 rows=1 width=4)
   Output: 1
   Filter: (1 = ANY ('{2,3}'::integer[]))
 Optimizer: pg_orca
(4 rows)

explain verbose select n_regionkey as x, n_regionkey  + 1 as y from nation;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=8)
   Output: n_regionkey, (n_regionkey + 1)
 Optimizer: pg_orca
(3 rows)

explain verbose select 1 from generate_series(1,10);
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Function Scan on pg_catalog.generate_series  (cost=0.00..0.01 rows=1000 width=4)
   Output: 1
   Function Call: generate_series(1, 10)
 Optimizer: pg_orca
(4 rows)

explain verbose select g from generate_series(1,10) g;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Function Scan on pg_catalog.generate_series  (cost=0.00..0.00 rows=1000 width=4)
   Output: generate_series
   Function Call: generate_series(1, 10)
 Optimizer: pg_orca
(4 rows)

explain verbose select g + 1 from generate_series(1,10) g;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Function Scan on pg_catalog.generate_series  (cost=0.00..0.01 rows=1000 width=4)
   Output: (generate_series + 1)
   Function Call: generate_series(1, 10)
 Optimizer: pg_orca
(4 rows)

explain verbose select g + 1 as x from generate_series(1,10) g where 1 < 10 ;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Function Scan on pg_catalog.generate_series  (cost=0.00..0.01 rows=1000 width=4)
   Output: (generate_series + 1)
   Function Call: generate_series(1, 10)
   Filter: (1 < 10)
 Optimizer: pg_orca
(5 rows)

explain verbose  select n_regionkey as x, n_regionkey + 1 as y from nation limit 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=8)
   Output: n_regionkey, ((n_regionkey + 1))
   ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=8)
         Output: n_regionkey, (n_regionkey + 1)
 Optimizer: pg_orca
(5 rows)

explain verbose select o_totalprice + 1, o_totalprice - 1, o_totalprice * 1, o_totalprice / 1 from orders where o_orderkey = 1000 and o_shippriority + 1 > 10;
                                                                     QUERY PLAN                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=32)
   Output: o_totalprice, (o_totalprice + (1)::numeric), (o_totalprice - (1)::numeric), (o_totalprice * (1)::numeric), (o_totalprice / (1)::numeric)
   Filter: ((orders.o_orderkey = 1000) AND ((orders.o_shippriority + 1) > 10))
 Optimizer: pg_orca
(4 rows)

-- indexscan
explain verbose select * from nation order by 1 limit 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=185)
   Output: n_nationkey, n_name, n_regionkey, n_comment
   ->  Index Scan using nation_pkey on public.nation  (cost=0.00..6.00 rows=1 width=185)
         Output: n_nationkey, n_name, n_regionkey, n_comment
         Index Cond: true
 Optimizer: pg_orca
(6 rows)

explain verbose select * from nation order by 2 limit 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=185)
   Output: n_nationkey, n_name, n_regionkey, n_comment
   ->  Sort  (cost=0.00..431.00 rows=1 width=185)
         Output: n_nationkey, n_name, n_regionkey, n_comment
         Sort Key: nation.n_name
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=185)
               Output: n_nationkey, n_name, n_regionkey, n_comment
 Optimizer: pg_orca
(8 rows)

explain verbose select * from nation order by 3 limit 10;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=185)
   Output: n_nationkey, n_name, n_regionkey, n_comment
   ->  Index Scan using idx_nation_regionkey on public.nation  (cost=0.00..6.00 rows=1 width=185)
         Output: n_nationkey, n_name, n_regionkey, n_comment
         Index Cond: true
 Optimizer: pg_orca
(6 rows)

explain verbose select * from nation order by 4 limit 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=185)
   Output: n_nationkey, n_name, n_regionkey, n_comment
   ->  Sort  (cost=0.00..431.00 rows=1 width=185)
         Output: n_nationkey, n_name, n_regionkey, n_comment
         Sort Key: nation.n_comment
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=185)
               Output: n_nationkey, n_name, n_regionkey, n_comment
 Optimizer: pg_orca
(8 rows)

explain verbose select * from orders order by 1 desc limit 10;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
   ->  Index Scan Backward using orders_pkey on public.orders  (cost=0.00..6.00 rows=1 width=134)
         Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
         Index Cond: true
 Optimizer: pg_orca
(6 rows)

explain verbose select * from orders order by 1 desc, 2 asc limit 10;
                                                                 QUERY PLAN                                                                 
--------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
   ->  Sort  (cost=0.00..431.00 rows=1 width=134)
         Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
         Sort Key: orders.o_orderkey DESC, orders.o_custkey
         ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=134)
               Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
 Optimizer: pg_orca
(8 rows)

-- base test cases
explain verbose select o_totalprice + 1 from orders where o_orderkey = 1000 and o_shippriority + 1 < 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
   Output: o_totalprice, (o_totalprice + (1)::numeric)
   Filter: ((orders.o_orderkey = 1000) AND ((orders.o_shippriority + 1) < 10))
 Optimizer: pg_orca
(4 rows)

explain verbose select * from customer where c_custkey in (1,2,2,3,123,34,345,453,56,567,23,213);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
   Output: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment
   Filter: (customer.c_custkey = ANY ('{1,2,2,3,123,34,345,453,56,567,23,213}'::integer[]))
 Optimizer: pg_orca
(4 rows)

explain verbose select * from customer where c_custkey in (1,2,2,3,123,34,345,453,56,567,23,213) or 1+1=2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
   Output: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment
   Filter: ((customer.c_custkey = ANY ('{1,2,2,3,123,34,345,453,56,567,23,213}'::integer[])) OR ((1 + 1) = 2))
 Optimizer: pg_orca
(4 rows)

explain verbose select sum(n_regionkey) from nation;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Aggregate  (cost=0.00..431.00 rows=1 width=8)
   Output: sum(n_regionkey)
   ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
         Output: n_regionkey
 Optimizer: pg_orca
(5 rows)

explain verbose select sum(n_regionkey) from nation group by n_name;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 GroupAggregate  (cost=0.00..431.00 rows=1 width=8)
   Output: sum(n_regionkey)
   Group Key: nation.n_name
   ->  Sort  (cost=0.00..431.00 rows=1 width=12)
         Output: n_name, n_regionkey
         Sort Key: nation.n_name
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=12)
               Output: n_name, n_regionkey
 Optimizer: pg_orca
(9 rows)

explain verbose select o_orderkey, sum(o_custkey) from orders group by o_orderkey order by o_orderkey;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=12)
   Output: o_orderkey, (sum(o_custkey))
   ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=12)
         Output: o_orderkey, sum(o_custkey)
         Group Key: orders.o_orderkey
         ->  Sort  (cost=0.00..431.00 rows=1 width=8)
               Output: o_orderkey, o_custkey
               Sort Key: orders.o_orderkey
               ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
                     Output: o_orderkey, o_custkey
 Optimizer: pg_orca
(11 rows)

explain verbose select o_orderkey, sum(o_custkey) from orders group by o_orderkey order by o_orderkey limit 10;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=12)
   Output: o_orderkey, (sum(o_custkey))
   ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=12)
         Output: o_orderkey, sum(o_custkey)
         Group Key: orders.o_orderkey
         ->  Sort  (cost=0.00..431.00 rows=1 width=8)
               Output: o_orderkey, o_custkey
               Sort Key: orders.o_orderkey
               ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
                     Output: o_orderkey, o_custkey
 Optimizer: pg_orca
(11 rows)

explain verbose select o_orderkey, sum(o_custkey + o_orderkey) from orders group by o_orderkey order by o_orderkey limit 10;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=12)
   Output: o_orderkey, (sum((o_custkey + o_orderkey)))
   ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=12)
         Output: o_orderkey, sum((o_custkey + o_orderkey))
         Group Key: orders.o_orderkey
         ->  Sort  (cost=0.00..431.00 rows=1 width=8)
               Output: o_orderkey, o_custkey
               Sort Key: orders.o_orderkey
               ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
                     Output: o_orderkey, o_custkey
 Optimizer: pg_orca
(11 rows)

explain verbose select * from nation UNION select * from nation order by 2 limit 10;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.00 rows=1 width=24)
   Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
   ->  GroupAggregate  (cost=0.00..862.00 rows=1 width=24)
         Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
         Group Key: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
         ->  Sort  (cost=0.00..862.00 rows=1 width=24)
               Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
               Sort Key: nation.n_name, nation.n_nationkey, nation.n_regionkey, nation.n_comment
               ->  Append  (cost=0.00..862.00 rows=1 width=24)
                     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=24)
                           Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
                     ->  Seq Scan on public.nation nation_1  (cost=0.00..431.00 rows=1 width=24)
                           Output: nation_1.n_nationkey, nation_1.n_name, nation_1.n_regionkey, nation_1.n_comment
 Optimizer: pg_orca
(14 rows)

explain verbose select * from nation UNION ALL select * from nation order by 2 limit 10;
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.00 rows=1 width=24)
   Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
   ->  Sort  (cost=0.00..862.00 rows=1 width=24)
         Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
         Sort Key: nation.n_name
         ->  Append  (cost=0.00..862.00 rows=1 width=24)
               ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=185)
                     Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
               ->  Seq Scan on public.nation nation_1  (cost=0.00..431.00 rows=1 width=185)
                     Output: nation_1.n_nationkey, nation_1.n_name, nation_1.n_regionkey, nation_1.n_comment
 Optimizer: pg_orca
(11 rows)

explain select * from orders join nation on orders.o_custkey = nation.n_regionkey;
                           QUERY PLAN                           
----------------------------------------------------------------
 Nested Loop  (cost=0.00..1324034.75 rows=1 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
 Optimizer: pg_orca
(5 rows)

explain select * from orders join nation on orders.o_custkey = nation.n_regionkey and nation.n_regionkey = 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Nested Loop  (cost=0.00..1324034.78 rows=1 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
         Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(6 rows)

explain select * from orders join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Nested Loop  (cost=0.00..1324034.78 rows=1 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
         Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(6 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..1324036.24 rows=2 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
 Optimizer: pg_orca
(5 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey and nation.n_regionkey = 1;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..1324036.27 rows=2 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
         Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(6 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1;
                           QUERY PLAN                           
----------------------------------------------------------------
 Nested Loop  (cost=0.00..1324034.78 rows=1 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
         Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(6 rows)

explain select * from nation EXCEPT select * from nation order by 3 limit 10;
                                                                                                           QUERY PLAN                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.00 rows=1 width=24)
   ->  GroupAggregate  (cost=0.00..862.00 rows=1 width=24)
         Group Key: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
         ->  Sort  (cost=0.00..862.00 rows=1 width=24)
               Sort Key: nation.n_regionkey, nation.n_nationkey, nation.n_name, nation.n_comment
               ->  Hash Join  (cost=0.00..862.00 rows=1 width=24)
                     Hash Cond: ((nation.n_nationkey = nation_1.n_nationkey) AND (nation.n_name = nation_1.n_name) AND (nation.n_regionkey = nation_1.n_regionkey) AND ((nation.n_comment)::text = (nation_1.n_comment)::text))
                     ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=24)
                     ->  Hash  (cost=0.00..0.00 rows=0 width=0)
                           ->  Seq Scan on nation nation_1  (cost=0.00..431.00 rows=1 width=24)
 Optimizer: pg_orca
(11 rows)

explain select * from nation INTERSECT select * from nation order by 3 limit 10;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.00 rows=1 width=24)
   ->  Sort  (cost=0.00..862.00 rows=1 width=24)
         Sort Key: nation.n_regionkey
         ->  Hash Join  (cost=0.00..862.00 rows=1 width=24)
               Hash Cond: ((nation.n_nationkey = nation_1.n_nationkey) AND (nation.n_name = nation_1.n_name) AND (nation.n_regionkey = nation_1.n_regionkey) AND ((nation.n_comment)::text = (nation_1.n_comment)::text))
               ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=24)
                     Group Key: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
                     ->  Sort  (cost=0.00..431.00 rows=1 width=24)
                           Sort Key: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
                           ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=24)
               ->  Hash  (cost=0.00..0.00 rows=0 width=0)
                     ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=24)
                           Group Key: nation_1.n_nationkey, nation_1.n_name, nation_1.n_regionkey, nation_1.n_comment
                           ->  Sort  (cost=0.00..431.00 rows=1 width=24)
                                 Sort Key: nation_1.n_nationkey, nation_1.n_name, nation_1.n_regionkey, nation_1.n_comment
                                 ->  Seq Scan on nation nation_1  (cost=0.00..431.00 rows=1 width=24)
 Optimizer: pg_orca
(17 rows)

explain verbose select * from customer where c_custkey in (select c_custkey from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.66 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = customer.c_custkey)
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(9 rows)

explain verbose select * from customer x where c_custkey in (select x.c_nationkey from nation);
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.69 rows=1 width=223)
   Output: x.c_custkey, x.c_name, x.c_address, x.c_nationkey, x.c_phone, x.c_acctbal, x.c_mktsegment, x.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer x  (cost=0.00..431.00 rows=1 width=223)
         Output: x.c_custkey, x.c_name, x.c_address, x.c_nationkey, x.c_phone, x.c_acctbal, x.c_mktsegment, x.c_comment
         Filter: (x.c_custkey = x.c_nationkey)
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(9 rows)

explain verbose select * from customer a join customer b on a.c_custkey != b.c_custkey;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..1324035.66 rows=1 width=446)
   Output: a.c_custkey, a.c_name, a.c_address, a.c_nationkey, a.c_phone, a.c_acctbal, a.c_mktsegment, a.c_comment, b.c_custkey, b.c_name, b.c_address, b.c_nationkey, b.c_phone, b.c_acctbal, b.c_mktsegment, b.c_comment
   Join Filter: (a.c_custkey <> b.c_custkey)
   ->  Seq Scan on public.customer a  (cost=0.00..431.00 rows=1 width=223)
         Output: a.c_custkey, a.c_name, a.c_address, a.c_nationkey, a.c_phone, a.c_acctbal, a.c_mktsegment, a.c_comment
   ->  Seq Scan on public.customer b  (cost=0.00..431.00 rows=1 width=223)
         Output: b.c_custkey, b.c_name, b.c_address, b.c_nationkey, b.c_phone, b.c_acctbal, b.c_mktsegment, b.c_comment
 Optimizer: pg_orca
(8 rows)

explain verbose select * from customer where customer.c_custkey in (select customer.c_nationkey + 1 from (
 select * from nation where nation.n_nationkey in (select nation.n_nationkey + 1 from orders)
)i);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1356691723.67 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = (customer.c_nationkey + 1))
   ->  Limit  (cost=0.00..1324032.26 rows=1 width=1)
         ->  Nested Loop Semi Join  (cost=0.00..1324032.26 rows=1 width=1)
               Join Filter: true
               ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
                     Filter: (nation.n_nationkey = (nation.n_nationkey + 1))
               ->  Limit  (cost=0.00..431.00 rows=1 width=1)
                     ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(14 rows)

EXPLAIN verbose with cte as (select * from orders) select * from cte;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=134)
   Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
   Filter: true
 Optimizer: pg_orca
(4 rows)

EXPLAIN verbose with x as (select o_custkey a1, o_custkey a2, o_custkey from orders) select * from x where a1 = 1 and a2 = 2;
                           QUERY PLAN                           
----------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=12)
   Output: o_custkey, o_custkey, o_custkey
   Filter: (orders.o_custkey = 1)
 Optimizer: pg_orca
(4 rows)

EXPLAIN verbose with cte as (select * from orders left join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1)  select * from cte where o_orderkey = 1;
                                                                                                                               QUERY PLAN                                                                                                                               
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..1324034.78 rows=1 width=319)
   Output: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment, nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=134)
         Output: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
   ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=185)
         Output: nation.n_nationkey, nation.n_name, nation.n_regionkey, nation.n_comment
         Filter: (nation.n_regionkey = 1)
 Optimizer: pg_orca
(9 rows)

set pg_orca.enable_new_planner TO off;
-- load 'pg_orca.so';
-- set pg_orca.enable_orca to on;
-- set pg_orca.enable_new_planner TO on;
-- explain select * from orders EXCEPT ALL select * from orders order by 6 limit 10;
-- explain select * from orders INTERSECT ALL select * from orders order by 6 limit 10;
-- SemiJoin2InnerJoin
explain verbose select * from customer where exists (select * from nation where c_custkey = n_nationkey and c_nationkey <> n_regionkey);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.18 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
           Filter: ((customer.c_custkey = nation.n_nationkey) AND (customer.c_nationkey <> nation.n_regionkey))
 Optimizer: pg_orca
(8 rows)

explain verbose select * from customer where c_custkey in (select distinct c_custkey from nation);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.88 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Result  (cost=0.00..431.00 rows=1 width=4)
           Output: customer.c_custkey
           ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(8 rows)

explain verbose select * from customer where c_custkey in (select distinct n_regionkey from nation);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.29 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_regionkey
 Optimizer: pg_orca
(7 rows)

-- explain verbose select *,(select distinct n_regionkey from nation) from customer ;
explain verbose select * from customer where c_custkey in (select c_custkey from nation limit 3);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.89 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Limit  (cost=0.00..431.00 rows=1 width=4)
           Output: (customer.c_custkey)
           ->  Result  (cost=0.00..431.00 rows=1 width=4)
                 Output: customer.c_custkey
                 ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(10 rows)

explain verbose select * from customer where c_custkey > (select sum(n_nationkey) from nation);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.90 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (customer.c_custkey > (SubPlan 1))
   SubPlan 1
     ->  Aggregate  (cost=0.00..431.00 rows=1 width=8)
           Output: sum(nation.n_nationkey)
           ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
                 Output: nation.n_nationkey
 Optimizer: pg_orca
(9 rows)

explain verbose select * from customer where c_custkey in (select n_nationkey from nation);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.29 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
 Optimizer: pg_orca
(7 rows)

EXPLAIN SELECT * FROM customer WHERE 1+c_custkey IN (SELECT c_nationkey+1 FROM nation);
                             QUERY PLAN                             
--------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.69 rows=1 width=223)
   Join Filter: true
   ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=223)
         Filter: ((1 + c_custkey) = (c_nationkey + 1))
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(7 rows)

explain verbose select * from customer where 2 in (select n_nationkey + 1 from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.67 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   ->  Result  (cost=0.00..431.00 rows=1 width=1)
         Filter: (2 = ((nation.n_nationkey + 1)))
         ->  Result  (cost=0.00..431.00 rows=1 width=4)
               Output: (nation.n_nationkey + 1)
               ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
                     Output: nation.n_nationkey
 Optimizer: pg_orca
(12 rows)

explain verbose select * from customer where exists(select n_nationkey from nation where nation.n_nationkey<>customer.c_custkey group by nation.n_nationkey); 
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.11 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
           Filter: (nation.n_nationkey <> customer.c_custkey)
 Optimizer: pg_orca
(8 rows)

explain verbose SELECT pn, cn, vn FROM sale s WHERE EXISTS (SELECT * FROM customer WHERE EXISTS (SELECT * FROM product WHERE pn = s.pn));
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Seq Scan on public.sale s  (cost=0.00..1356691743.13 rows=1 width=12)
   Output: s.pn, s.cn, s.vn
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Nested Loop Semi Join  (cost=0.00..1324032.28 rows=1 width=6)
           Output: customer.ctid
           Join Filter: true
           ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=6)
                 Output: customer.ctid
           ->  Seq Scan on public.product  (cost=0.00..431.00 rows=1 width=1)
                 Filter: (product.pn = s.pn)
 Optimizer: pg_orca
(12 rows)

EXPLAIN SELECT pn, cn, vn FROM sale s WHERE cn IN (SELECT s.pn FROM customer WHERE cn NOT IN (SELECT pn FROM product WHERE pn = s.pn));
                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..1356691790.89 rows=1 width=12)
   ->  Seq Scan on sale s  (cost=0.00..1356691790.89 rows=1 width=12)
         Filter: ((cn = pn) AND EXISTS(SubPlan 2))
         SubPlan 2
           ->  Seq Scan on customer  (cost=0.00..1324032.33 rows=1 width=6)
                 Filter: (SubPlan 1)
                 SubPlan 1
                   ->  Result  (cost=0.00..431.00 rows=1 width=1)
                         ->  Result  (cost=0.00..431.00 rows=1 width=1)
                               Filter: ((CASE WHEN ((sum((CASE WHEN (customer.* = product.pn) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (product.pn IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (customer.* IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (customer.* = product.pn) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END) = true)
                               ->  Result  (cost=0.00..431.00 rows=1 width=1)
                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=16)
                                           ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                 ->  Seq Scan on product  (cost=0.00..431.00 rows=1 width=4)
                                                       Filter: (pn = customer.*)
 Optimizer: pg_orca
(16 rows)

EXPLAIN select * from customer where exists (select 1 from nation where nation.n_nationkey = customer.c_custkey and customer.c_custkey > 1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Seq Scan on customer  (cost=0.00..1324033.11 rows=1 width=56)
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Result  (cost=0.00..431.00 rows=1 width=4)
           ->  Result  (cost=0.00..431.00 rows=1 width=4)
                 ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=4)
                       Filter: ((n_nationkey = customer.c_custkey) AND (customer.c_custkey > 1))
 Optimizer: pg_orca
(8 rows)

select o_orderkey, sum(o_custkey + o_orderkey)/20 from orders group by o_orderkey order by o_orderkey limit 10;
 o_orderkey | ?column? 
------------+----------
(0 rows)

select * from orders where exists (select 1 from nation where nation.n_regionkey = orders.o_custkey and nation.n_regionkey = 10);
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------
(0 rows)

select *, (select 2 from nation where nation.n_regionkey = orders.o_custkey and nation.n_regionkey = 10) from orders where exists (select 1 from nation where nation.n_regionkey = orders.o_custkey and nation.n_regionkey = 10);
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment | ?column? 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------+----------
(0 rows)

-- explain insert into orders select * from orders where o_custkey = 1;
-- explain update orders set o_orderkey = 1 where o_orderkey = 1;
-- explain delete from orders where o_orderkey = 1;
