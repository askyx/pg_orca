set pg_orca.enable_orca to off;
create extension pg_tpch;
 create table product
  (
          pn int not null,
          pname text not null,
          pcolor text,
 
          primary key (pn)
 
  ) ;
 
  create table sale
  (
          cn int not null,
          vn int not null,
          pn int not null,
         dt date not null,
          qty int not null,
          prc float not null,
 
          primary key (cn, vn, pn)
 
  ) ;
set pg_orca.enable_orca to on;
explain select * from orders limit 10;
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 2 limit 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 3 limit 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Sort  (cost=0.00..431.00 rows=1 width=134)
         Sort Key: o_orderstatus
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(5 rows)

explain select * from orders order by 4 limit 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Sort  (cost=0.00..431.00 rows=1 width=134)
         Sort Key: o_totalprice
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(5 rows)

explain select * from orders order by 5 limit 10;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using idx_orders_orderdate on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders UNION select * from orders order by 6 limit 10;
                                                                                                 QUERY PLAN                                                                                                  
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.00 rows=1 width=56)
   ->  GroupAggregate  (cost=0.00..862.00 rows=1 width=56)
         Group Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
         ->  Sort  (cost=0.00..862.00 rows=1 width=56)
               Sort Key: orders.o_orderpriority, orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_clerk, orders.o_shippriority, orders.o_comment
               ->  Append  (cost=0.00..862.00 rows=1 width=56)
                     ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=56)
                     ->  Seq Scan on orders orders_1  (cost=0.00..431.00 rows=1 width=56)
 Optimizer: pg_orca
(9 rows)

explain select * from orders EXCEPT select * from orders order by 6 limit 10;
                                                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.01 rows=1 width=56)
   ->  GroupAggregate  (cost=0.00..862.01 rows=1 width=56)
         Group Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
         ->  Sort  (cost=0.00..862.00 rows=1 width=56)
               Sort Key: orders.o_orderpriority, orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_clerk, orders.o_shippriority, orders.o_comment
               ->  Hash Anti Join  (cost=0.00..862.00 rows=1 width=56)
                     Hash Cond: ((orders.o_orderkey = orders_1.o_orderkey) AND (orders.o_custkey = orders_1.o_custkey) AND (orders.o_orderstatus = orders_1.o_orderstatus) AND (orders.o_totalprice = orders_1.o_totalprice) AND (orders.o_orderdate = orders_1.o_orderdate) AND (orders.o_orderpriority = orders_1.o_orderpriority) AND (orders.o_clerk = orders_1.o_clerk) AND (orders.o_shippriority = orders_1.o_shippriority) AND ((orders.o_comment)::text = (orders_1.o_comment)::text))
                     ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=56)
                     ->  Hash  (cost=431.00..431.00 rows=1 width=56)
                           ->  Seq Scan on orders orders_1  (cost=0.00..431.00 rows=1 width=56)
 Optimizer: pg_orca
(11 rows)

explain select * from orders INTERSECT select * from orders order by 6 limit 10;
                                                                                                                                                                                                                                        QUERY PLAN                                                                                                                                                                                                                                        
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..862.01 rows=1 width=56)
   ->  Sort  (cost=0.00..862.01 rows=1 width=56)
         Sort Key: orders.o_orderpriority
         ->  Hash Join  (cost=0.00..862.01 rows=1 width=56)
               Hash Cond: ((orders.o_orderkey = orders_1.o_orderkey) AND (orders.o_custkey = orders_1.o_custkey) AND (orders.o_orderstatus = orders_1.o_orderstatus) AND (orders.o_totalprice = orders_1.o_totalprice) AND (orders.o_orderdate = orders_1.o_orderdate) AND (orders.o_orderpriority = orders_1.o_orderpriority) AND (orders.o_clerk = orders_1.o_clerk) AND (orders.o_shippriority = orders_1.o_shippriority) AND ((orders.o_comment)::text = (orders_1.o_comment)::text))
               ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=56)
                     Group Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
                     ->  Sort  (cost=0.00..431.00 rows=1 width=56)
                           Sort Key: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
                           ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=56)
               ->  Hash  (cost=431.00..431.00 rows=1 width=56)
                     ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=56)
                           Group Key: orders_1.o_orderkey, orders_1.o_custkey, orders_1.o_orderstatus, orders_1.o_totalprice, orders_1.o_orderdate, orders_1.o_orderpriority, orders_1.o_clerk, orders_1.o_shippriority, orders_1.o_comment
                           ->  Sort  (cost=0.00..431.00 rows=1 width=56)
                                 Sort Key: orders_1.o_orderkey, orders_1.o_custkey, orders_1.o_orderstatus, orders_1.o_totalprice, orders_1.o_orderdate, orders_1.o_orderpriority, orders_1.o_clerk, orders_1.o_shippriority, orders_1.o_comment
                                 ->  Seq Scan on orders orders_1  (cost=0.00..431.00 rows=1 width=56)
 Optimizer: pg_orca
(17 rows)

explain select * from orders order by 1 desc limit 10;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan Backward using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 asc, 2  limit 10;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Sort  (cost=0.00..431.00 rows=1 width=134)
         Sort Key: o_orderkey, o_custkey
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(5 rows)

explain select sum(o_totalprice) from orders;
                          QUERY PLAN                          
--------------------------------------------------------------
 Aggregate  (cost=0.00..431.00 rows=1 width=8)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=8)
 Optimizer: pg_orca
(3 rows)

-- base test cases
explain (verbose) select o_totalprice + 1 from orders where o_orderkey = 1000 and o_shippriority + 1 < 10;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Result  (cost=0.00..431.00 rows=1 width=8)
   Output: (o_totalprice + (1)::numeric)
   ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
         Output: o_totalprice
         Filter: ((orders.o_orderkey = 1000) AND ((orders.o_shippriority + 1) < 10))
 Optimizer: pg_orca
(6 rows)

-- SemiJoin2InnerJoin
explain (verbose) select * from customer where exists (select * from nation where c_custkey = n_nationkey and c_nationkey <> n_regionkey);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.18 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
           Filter: ((customer.c_custkey = nation.n_nationkey) AND (customer.c_nationkey <> nation.n_regionkey))
 Optimizer: pg_orca
(8 rows)

explain (verbose) select * from customer where c_custkey in (select c_custkey from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.66 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = customer.c_custkey)
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(9 rows)

explain (verbose) select * from customer where c_custkey in (1,2,2,3,123,34,345,453,56,567,23,213);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
   Output: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment
   Filter: (customer.c_custkey = ANY ('{1,2,2,3,123,34,345,453,56,567,23,213}'::integer[]))
 Optimizer: pg_orca
(4 rows)

explain (verbose) select * from customer where c_custkey in (1,2,2,3,123,34,345,453,56,567,23,213) or 1+1=2;
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
   Output: c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_mktsegment, c_comment
   Filter: ((customer.c_custkey = ANY ('{1,2,2,3,123,34,345,453,56,567,23,213}'::integer[])) OR ((1 + 1) = 2))
 Optimizer: pg_orca
(4 rows)

explain (verbose) select * from customer where c_custkey in (select distinct c_custkey from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.66 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = customer.c_custkey)
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(9 rows)

explain (verbose) select * from customer where c_custkey in (select c_custkey from nation limit 3);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.89 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Limit  (cost=0.00..431.00 rows=1 width=4)
           Output: (customer.c_custkey)
           ->  Result  (cost=0.00..431.00 rows=1 width=4)
                 Output: customer.c_custkey
                 ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(10 rows)

explain (verbose) select * from customer where c_custkey in (select n_nationkey from nation);
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.29 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: (ANY (customer.c_custkey = (SubPlan 1).col1))
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
 Optimizer: pg_orca
(7 rows)

EXPLAIN SELECT * FROM customer WHERE 1+c_custkey IN (SELECT c_nationkey+1 FROM nation);
                             QUERY PLAN                             
--------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.69 rows=1 width=223)
   Join Filter: true
   ->  Seq Scan on customer  (cost=0.00..431.00 rows=1 width=223)
         Filter: ((1 + c_custkey) = (c_nationkey + 1))
   ->  Limit  (cost=0.00..431.00 rows=1 width=1)
         ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(7 rows)

explain (verbose) select * from customer where 2 in (select n_nationkey + 1 from nation);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1324033.67 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   ->  Materialize  (cost=0.00..431.00 rows=1 width=1)
         ->  Result  (cost=0.00..431.00 rows=1 width=1)
               Filter: (2 = ((nation.n_nationkey + 1)))
               ->  Result  (cost=0.00..431.00 rows=1 width=4)
                     Output: (nation.n_nationkey + 1)
                     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
                           Output: nation.n_nationkey
 Optimizer: pg_orca
(13 rows)

explain (verbose) select * from customer where customer.c_custkey in (select customer.c_nationkey + 1 from (
 select * from nation where nation.n_nationkey in (select nation.n_nationkey + 1 from orders)
)i);
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join  (cost=0.00..1356691723.67 rows=1 width=223)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Join Filter: true
   ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=223)
         Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
         Filter: (customer.c_custkey = (customer.c_nationkey + 1))
   ->  Materialize  (cost=0.00..1324032.26 rows=1 width=1)
         ->  Limit  (cost=0.00..1324032.26 rows=1 width=1)
               ->  Nested Loop Semi Join  (cost=0.00..1324032.26 rows=1 width=1)
                     Join Filter: true
                     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=1)
                           Filter: (nation.n_nationkey = (nation.n_nationkey + 1))
                     ->  Limit  (cost=0.00..431.00 rows=1 width=1)
                           ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=1)
 Optimizer: pg_orca
(15 rows)

explain (verbose) select * from customer a join customer b on a.c_custkey != b.c_custkey;
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=0.00..1324035.66 rows=1 width=446)
   Output: a.c_custkey, a.c_name, a.c_address, a.c_nationkey, a.c_phone, a.c_acctbal, a.c_mktsegment, a.c_comment, b.c_custkey, b.c_name, b.c_address, b.c_nationkey, b.c_phone, b.c_acctbal, b.c_mktsegment, b.c_comment
   Join Filter: (a.c_custkey <> b.c_custkey)
   ->  Seq Scan on public.customer a  (cost=0.00..431.00 rows=1 width=223)
         Output: a.c_custkey, a.c_name, a.c_address, a.c_nationkey, a.c_phone, a.c_acctbal, a.c_mktsegment, a.c_comment
   ->  Seq Scan on public.customer b  (cost=0.00..431.00 rows=1 width=223)
         Output: b.c_custkey, b.c_name, b.c_address, b.c_nationkey, b.c_phone, b.c_acctbal, b.c_mktsegment, b.c_comment
 Optimizer: pg_orca
(8 rows)

explain (verbose) select * from customer where exists(select n_nationkey from nation where nation.n_nationkey<>customer.c_custkey group by nation.n_nationkey); 
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.customer  (cost=0.00..1324033.11 rows=1 width=56)
   Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Seq Scan on public.nation  (cost=0.00..431.00 rows=1 width=4)
           Output: nation.n_nationkey
           Filter: (nation.n_nationkey <> customer.c_custkey)
 Optimizer: pg_orca
(8 rows)

explain (verbose) SELECT pn, cn, vn FROM sale s WHERE EXISTS (SELECT * FROM customer WHERE EXISTS (SELECT * FROM product WHERE pn = s.pn));
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Seq Scan on public.sale s  (cost=0.00..1356691744.18 rows=1 width=12)
   Output: s.pn, s.cn, s.vn
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Nested Loop Semi Join  (cost=0.00..1324032.28 rows=1 width=6)
           Output: customer.ctid
           Join Filter: true
           ->  Seq Scan on public.customer  (cost=0.00..431.00 rows=1 width=6)
                 Output: customer.ctid
           ->  Materialize  (cost=0.00..431.00 rows=1 width=1)
                 ->  Seq Scan on public.product  (cost=0.00..431.00 rows=1 width=1)
                       Filter: (product.pn = s.pn)
 Optimizer: pg_orca
(13 rows)

EXPLAIN SELECT pn, cn, vn FROM sale s WHERE cn IN (SELECT s.pn FROM customer WHERE cn NOT IN (SELECT pn FROM product WHERE pn = s.pn));
                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..1356691790.89 rows=1 width=12)
   ->  Seq Scan on sale s  (cost=0.00..1356691790.89 rows=1 width=12)
         Filter: ((cn = pn) AND EXISTS(SubPlan 2))
         SubPlan 2
           ->  Seq Scan on customer  (cost=0.00..1324032.33 rows=1 width=6)
                 Filter: (SubPlan 1)
                 SubPlan 1
                   ->  Result  (cost=0.00..431.00 rows=1 width=1)
                         ->  Result  (cost=0.00..431.00 rows=1 width=1)
                               Filter: ((CASE WHEN ((sum((CASE WHEN (customer.* = product.pn) THEN 1 ELSE 0 END))) IS NULL) THEN true WHEN ((sum((CASE WHEN (product.pn IS NULL) THEN 1 ELSE 0 END))) > '0'::bigint) THEN NULL::boolean WHEN (customer.* IS NULL) THEN NULL::boolean WHEN ((sum((CASE WHEN (customer.* = product.pn) THEN 1 ELSE 0 END))) = '0'::bigint) THEN true ELSE false END) = true)
                               ->  Result  (cost=0.00..431.00 rows=1 width=1)
                                     ->  Aggregate  (cost=0.00..431.00 rows=1 width=16)
                                           ->  Result  (cost=0.00..431.00 rows=1 width=8)
                                                 ->  Seq Scan on product  (cost=0.00..431.00 rows=1 width=4)
                                                       Filter: (pn = customer.*)
 Optimizer: pg_orca
(16 rows)

EXPLAIN select * from customer where exists (select 1 from nation where nation.n_nationkey = customer.c_custkey and customer.c_custkey > 1);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Seq Scan on customer  (cost=0.00..1324033.11 rows=1 width=56)
   Filter: EXISTS(SubPlan 1)
   SubPlan 1
     ->  Result  (cost=0.00..431.00 rows=1 width=4)
           ->  Result  (cost=0.00..431.00 rows=1 width=4)
                 ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=4)
                       Filter: ((n_nationkey = customer.c_custkey) AND (customer.c_custkey > 1))
 Optimizer: pg_orca
(8 rows)

explain verbose select o_custkey,o_orderkey,o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
   Output: o_custkey, o_orderkey, o_custkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_custkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_orderkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_orderkey
 Optimizer: pg_orca
(3 rows)

explain verbose select * from orders;
                                                           QUERY PLAN                                                           
--------------------------------------------------------------------------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=134)
   Output: o_orderkey, o_custkey, o_orderstatus, o_totalprice, o_orderdate, o_orderpriority, o_clerk, o_shippriority, o_comment
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey,o_orderkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
   Output: o_custkey, o_orderkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_custkey,o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=4)
   Output: o_custkey, o_custkey
 Optimizer: pg_orca
(3 rows)

explain verbose select o_orderkey,o_custkey from orders;
                          QUERY PLAN                           
---------------------------------------------------------------
 Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
   Output: o_orderkey, o_custkey
 Optimizer: pg_orca
(3 rows)

explain (verbose) select o_totalprice + 1, o_totalprice - 1, o_totalprice * 1, o_totalprice / 1 from orders where o_orderkey = 1000 and o_shippriority + 1 > 10;
                                                              QUERY PLAN                                                              
--------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.00 rows=1 width=32)
   Output: (o_totalprice + (1)::numeric), (o_totalprice - (1)::numeric), (o_totalprice * (1)::numeric), (o_totalprice / (1)::numeric)
   ->  Seq Scan on public.orders  (cost=0.00..431.00 rows=1 width=8)
         Output: o_totalprice
         Filter: ((orders.o_orderkey = 1000) AND ((orders.o_shippriority + 1) > 10))
 Optimizer: pg_orca
(6 rows)

explain select o_orderkey from orders limit 10;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=4)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=4)
 Optimizer: pg_orca
(3 rows)

explain select * from orders limit 10;
                           QUERY PLAN                           
----------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select o_orderkey from orders order by 1 limit 10;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=4)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=4)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

explain select o_custkey from orders order by 1 limit 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=4)
   ->  Index Scan using idx_orders_custkey on orders  (cost=0.00..6.00 rows=1 width=4)
 Optimizer: pg_orca
(3 rows)

explain select * from orders order by 1 limit 10;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Limit  (cost=0.00..6.00 rows=1 width=134)
   ->  Index Scan using orders_pkey on orders  (cost=0.00..6.00 rows=1 width=134)
 Optimizer: pg_orca
(3 rows)

select sum(o_custkey) from orders;
 sum 
-----
    
(1 row)

select sum(o_custkey) from orders group by o_orderkey;
 sum 
-----
(0 rows)

select o_orderkey, sum(o_custkey) from orders group by o_orderkey order by o_orderkey;
 o_orderkey | sum 
------------+-----
(0 rows)

select o_orderkey, sum(o_custkey) from orders group by o_orderkey order by o_orderkey limit 10;
 o_orderkey | sum 
------------+-----
(0 rows)

select o_orderkey, sum(o_custkey + o_orderkey) from orders group by o_orderkey order by o_orderkey limit 10;
 o_orderkey | sum 
------------+-----
(0 rows)

-- select o_orderkey, sum(o_custkey + o_orderkey)/20 from orders group by o_orderkey order by o_orderkey limit 10;
select * from orders where exists (select 1 from nation where nation.n_regionkey = orders.o_custkey and nation.n_regionkey = 10);
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------
(0 rows)

explain insert  into orders select * from orders where o_custkey = 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Insert on orders  (cost=0.14..8.16 rows=0 width=0)
   ->  Index Scan using idx_orders_custkey on orders orders_1  (cost=0.14..8.16 rows=1 width=346)
         Index Cond: (o_custkey = 1)
 Optimizer: pg_orca
(4 rows)

explain update orders set o_orderkey = 1 where o_orderkey = 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Update on orders  (cost=0.14..8.16 rows=0 width=0)
   ->  Index Scan using orders_pkey on orders  (cost=0.14..8.16 rows=1 width=10)
         Index Cond: (o_orderkey = 1)
 Optimizer: pg_orca
(4 rows)

explain delete from orders where o_orderkey = 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Delete on orders  (cost=0.14..8.16 rows=0 width=0)
   ->  Index Scan using orders_pkey on orders  (cost=0.14..8.16 rows=1 width=6)
         Index Cond: (o_orderkey = 1)
 Optimizer: pg_orca
(4 rows)

select * from orders join nation on orders.o_custkey = nation.n_regionkey;
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment | n_nationkey | n_name | n_regionkey | n_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------+-------------+--------+-------------+-----------
(0 rows)

select * from orders join nation on orders.o_custkey = nation.n_regionkey and nation.n_regionkey = 1;
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment | n_nationkey | n_name | n_regionkey | n_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------+-------------+--------+-------------+-----------
(0 rows)

select * from orders join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1;
 o_orderkey | o_custkey | o_orderstatus | o_totalprice | o_orderdate | o_orderpriority | o_clerk | o_shippriority | o_comment | n_nationkey | n_name | n_regionkey | n_comment 
------------+-----------+---------------+--------------+-------------+-----------------+---------+----------------+-----------+-------------+--------+-------------+-----------
(0 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..1324036.24 rows=2 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
 Optimizer: pg_orca
(5 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey and nation.n_regionkey = 1;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Nested Loop Left Join  (cost=0.00..1324036.46 rows=2 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Materialize  (cost=0.00..431.00 rows=1 width=185)
         ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
               Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(7 rows)

explain select * from orders left join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Nested Loop  (cost=0.00..1324034.97 rows=1 width=319)
   Join Filter: (orders.o_custkey = nation.n_regionkey)
   ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
   ->  Materialize  (cost=0.00..431.00 rows=1 width=185)
         ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
               Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(7 rows)

EXPLAIN with cte as (select * from orders) select * from cte;
                        QUERY PLAN                        
----------------------------------------------------------
 Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
 Optimizer: pg_orca
(2 rows)

EXPLAIN with x as (select o_custkey a1, o_custkey a2, o_custkey from orders) select * from x where a1 = 1 and a2 = 2;
                                                                                             QUERY PLAN                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..431.00 rows=1 width=12)
   Filter: ((o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = o_custkey) AND (o_custkey = 2))
   ->  Result  (cost=0.00..431.00 rows=1 width=12)
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=4)
               Filter: (o_custkey = 1)
 Optimizer: pg_orca
(6 rows)

EXPLAIN with cte as (select * from orders left join nation on orders.o_custkey = nation.n_regionkey where nation.n_regionkey = 1)  select * from cte where o_orderkey = 1;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Result  (cost=0.00..1324034.97 rows=1 width=319)
   Filter: (orders.o_orderkey = 1)
   ->  Nested Loop  (cost=0.00..1324034.97 rows=1 width=319)
         Join Filter: (orders.o_custkey = nation.n_regionkey)
         ->  Seq Scan on orders  (cost=0.00..431.00 rows=1 width=134)
         ->  Materialize  (cost=0.00..431.00 rows=1 width=185)
               ->  Seq Scan on nation  (cost=0.00..431.00 rows=1 width=185)
                     Filter: (n_regionkey = 1)
 Optimizer: pg_orca
(9 rows)

select 1 where 1 in (2, 3);
 ?column? 
----------
(0 rows)

select 1;
 ?column? 
----------
        1
(1 row)

select 1 from generate_series(1,10);
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

